// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/nav_data.proto

#include "zima/proto/nav_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ZimaProto {
namespace NavData {
PROTOBUF_CONSTEXPR PRoomInfo::PRoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_index_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_bound_)*/nullptr
  , /*decltype(_impl_.section_base_cell_)*/nullptr
  , /*decltype(_impl_.section_x_range_)*/0u
  , /*decltype(_impl_.section_y_range_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PRoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRoomInfoDefaultTypeInternal() {}
  union {
    PRoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRoomInfoDefaultTypeInternal _PRoomInfo_default_instance_;
PROTOBUF_CONSTEXPR PVirtualWall::PVirtualWall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.map_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valid_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PVirtualWallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PVirtualWallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PVirtualWallDefaultTypeInternal() {}
  union {
    PVirtualWall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PVirtualWallDefaultTypeInternal _PVirtualWall_default_instance_;
PROTOBUF_CONSTEXPR PBlockArea::PBlockArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.map_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valid_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBlockAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBlockAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBlockAreaDefaultTypeInternal() {}
  union {
    PBlockArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBlockAreaDefaultTypeInternal _PBlockArea_default_instance_;
PROTOBUF_CONSTEXPR PNavData_RoomsInfoEntry_DoNotUse::PNavData_RoomsInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PNavData_RoomsInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PNavData_RoomsInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PNavData_RoomsInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PNavData_RoomsInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PNavData_RoomsInfoEntry_DoNotUseDefaultTypeInternal _PNavData_RoomsInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PNavData_VirtualWallsEntry_DoNotUse::PNavData_VirtualWallsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PNavData_VirtualWallsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PNavData_VirtualWallsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PNavData_VirtualWallsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PNavData_VirtualWallsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PNavData_VirtualWallsEntry_DoNotUseDefaultTypeInternal _PNavData_VirtualWallsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PNavData_BlockAreasEntry_DoNotUse::PNavData_BlockAreasEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PNavData_BlockAreasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PNavData_BlockAreasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PNavData_BlockAreasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PNavData_BlockAreasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PNavData_BlockAreasEntry_DoNotUseDefaultTypeInternal _PNavData_BlockAreasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PNavData::PNavData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rooms_info_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.virtual_walls_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.block_areas_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.slam_map_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nav_map_)*/nullptr
  , /*decltype(_impl_.slam_map_)*/nullptr
  , /*decltype(_impl_.probability_map_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PNavDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PNavDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PNavDataDefaultTypeInternal() {}
  union {
    PNavData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PNavDataDefaultTypeInternal _PNavData_default_instance_;
}  // namespace NavData
}  // namespace ZimaProto
static ::_pb::Metadata file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_zima_2fproto_2fnav_5fdata_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zima_2fproto_2fnav_5fdata_2eproto = nullptr;

const uint32_t TableStruct_zima_2fproto_2fnav_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PRoomInfo, _impl_.room_index_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PRoomInfo, _impl_.room_bound_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PRoomInfo, _impl_.section_base_cell_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PRoomInfo, _impl_.section_x_range_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PRoomInfo, _impl_.section_y_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PVirtualWall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PVirtualWall, _impl_.valid_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PVirtualWall, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PVirtualWall, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PVirtualWall, _impl_.map_value_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PVirtualWall, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PBlockArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PBlockArea, _impl_.valid_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PBlockArea, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PBlockArea, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PBlockArea, _impl_.map_value_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PBlockArea, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.nav_map_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.slam_map_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.probability_map_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.slam_map_filename_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.rooms_info_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.virtual_walls_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::NavData::PNavData, _impl_.block_areas_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ZimaProto::NavData::PRoomInfo)},
  { 11, -1, -1, sizeof(::ZimaProto::NavData::PVirtualWall)},
  { 22, -1, -1, sizeof(::ZimaProto::NavData::PBlockArea)},
  { 33, 41, -1, sizeof(::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse)},
  { 43, 51, -1, sizeof(::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse)},
  { 53, 61, -1, sizeof(::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse)},
  { 63, -1, -1, sizeof(::ZimaProto::NavData::PNavData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ZimaProto::NavData::_PRoomInfo_default_instance_._instance,
  &::ZimaProto::NavData::_PVirtualWall_default_instance_._instance,
  &::ZimaProto::NavData::_PBlockArea_default_instance_._instance,
  &::ZimaProto::NavData::_PNavData_RoomsInfoEntry_DoNotUse_default_instance_._instance,
  &::ZimaProto::NavData::_PNavData_VirtualWallsEntry_DoNotUse_default_instance_._instance,
  &::ZimaProto::NavData::_PNavData_BlockAreasEntry_DoNotUse_default_instance_._instance,
  &::ZimaProto::NavData::_PNavData_default_instance_._instance,
};

const char descriptor_table_protodef_zima_2fproto_2fnav_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031zima/proto/nav_data.proto\022\021ZimaProto.N"
  "avData\032\024zima/proto/map.proto\032 zima/proto"
  "/probability_map.proto\"\267\001\n\tPRoomInfo\022\022\n\n"
  "room_index\030\001 \001(\t\0220\n\nroom_bound\030\002 \001(\0132\034.Z"
  "imaProto.Map.PMapCellBound\0222\n\021section_ba"
  "se_cell\030\003 \001(\0132\027.ZimaProto.Map.PMapCell\022\027"
  "\n\017section_x_range\030\004 \001(\r\022\027\n\017section_y_ran"
  "ge\030\005 \001(\r\"\233\001\n\014PVirtualWall\022\r\n\005valid\030\001 \001(\010"
  "\022\016\n\006enable\030\002 \001(\010\022/\n\004type\030\003 \001(\0162!.ZimaPro"
  "to.NavData.PUserBlockType\022\021\n\tmap_value\030\004"
  " \001(\t\022(\n\006points\030\005 \003(\0132\030.ZimaProto.Map.PMa"
  "pPoint\"\231\001\n\nPBlockArea\022\r\n\005valid\030\001 \001(\010\022\016\n\006"
  "enable\030\002 \001(\010\022/\n\004type\030\003 \001(\0162!.ZimaProto.N"
  "avData.PUserBlockType\022\021\n\tmap_value\030\004 \001(\t"
  "\022(\n\006points\030\005 \003(\0132\030.ZimaProto.Map.PMapPoi"
  "nt\"\263\005\n\010PNavData\022\r\n\005index\030\001 \001(\r\0228\n\007nav_ma"
  "p\030\002 \001(\0132\'.ZimaProto.Map.PMultiLayerCharG"
  "ridMap2D\0224\n\010slam_map\030\003 \001(\0132\".ZimaProto.M"
  "ap.PSlamValueGridMap2D\022M\n\017probability_ma"
  "p\030\004 \001(\01324.ZimaProto.ProbabilityMap.PProb"
  "abilityIndexGridMap2D\022\031\n\021slam_map_filena"
  "me\030\005 \001(\t\022>\n\nrooms_info\030\006 \003(\0132*.ZimaProto"
  ".NavData.PNavData.RoomsInfoEntry\022D\n\rvirt"
  "ual_walls\030\007 \003(\0132-.ZimaProto.NavData.PNav"
  "Data.VirtualWallsEntry\022@\n\013block_areas\030\010 "
  "\003(\0132+.ZimaProto.NavData.PNavData.BlockAr"
  "easEntry\032N\n\016RoomsInfoEntry\022\013\n\003key\030\001 \001(\t\022"
  "+\n\005value\030\002 \001(\0132\034.ZimaProto.NavData.PRoom"
  "Info:\0028\001\032T\n\021VirtualWallsEntry\022\013\n\003key\030\001 \001"
  "(\r\022.\n\005value\030\002 \001(\0132\037.ZimaProto.NavData.PV"
  "irtualWall:\0028\001\032P\n\017BlockAreasEntry\022\013\n\003key"
  "\030\001 \001(\r\022,\n\005value\030\002 \001(\0132\035.ZimaProto.NavDat"
  "a.PBlockArea:\0028\001*J\n\016PUserBlockType\022\020\n\014kS"
  "trictBlock\020\000\022\024\n\020kAvoidWaterBlock\020\001\022\020\n\014kC"
  "arpetBlock\020\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_deps[2] = {
  &::descriptor_table_zima_2fproto_2fmap_2eproto,
  &::descriptor_table_zima_2fproto_2fprobability_5fmap_2eproto,
};
static ::_pbi::once_flag descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zima_2fproto_2fnav_5fdata_2eproto = {
    false, false, 1380, descriptor_table_protodef_zima_2fproto_2fnav_5fdata_2eproto,
    "zima/proto/nav_data.proto",
    &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once, descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_zima_2fproto_2fnav_5fdata_2eproto::offsets,
    file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto, file_level_enum_descriptors_zima_2fproto_2fnav_5fdata_2eproto,
    file_level_service_descriptors_zima_2fproto_2fnav_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter() {
  return &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zima_2fproto_2fnav_5fdata_2eproto(&descriptor_table_zima_2fproto_2fnav_5fdata_2eproto);
namespace ZimaProto {
namespace NavData {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUserBlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zima_2fproto_2fnav_5fdata_2eproto);
  return file_level_enum_descriptors_zima_2fproto_2fnav_5fdata_2eproto[0];
}
bool PUserBlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PRoomInfo::_Internal {
 public:
  static const ::ZimaProto::Map::PMapCellBound& room_bound(const PRoomInfo* msg);
  static const ::ZimaProto::Map::PMapCell& section_base_cell(const PRoomInfo* msg);
};

const ::ZimaProto::Map::PMapCellBound&
PRoomInfo::_Internal::room_bound(const PRoomInfo* msg) {
  return *msg->_impl_.room_bound_;
}
const ::ZimaProto::Map::PMapCell&
PRoomInfo::_Internal::section_base_cell(const PRoomInfo* msg) {
  return *msg->_impl_.section_base_cell_;
}
void PRoomInfo::clear_room_bound() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_bound_ != nullptr) {
    delete _impl_.room_bound_;
  }
  _impl_.room_bound_ = nullptr;
}
void PRoomInfo::clear_section_base_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.section_base_cell_ != nullptr) {
    delete _impl_.section_base_cell_;
  }
  _impl_.section_base_cell_ = nullptr;
}
PRoomInfo::PRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.NavData.PRoomInfo)
}
PRoomInfo::PRoomInfo(const PRoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PRoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_index_){}
    , decltype(_impl_.room_bound_){nullptr}
    , decltype(_impl_.section_base_cell_){nullptr}
    , decltype(_impl_.section_x_range_){}
    , decltype(_impl_.section_y_range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_index().empty()) {
    _this->_impl_.room_index_.Set(from._internal_room_index(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_room_bound()) {
    _this->_impl_.room_bound_ = new ::ZimaProto::Map::PMapCellBound(*from._impl_.room_bound_);
  }
  if (from._internal_has_section_base_cell()) {
    _this->_impl_.section_base_cell_ = new ::ZimaProto::Map::PMapCell(*from._impl_.section_base_cell_);
  }
  ::memcpy(&_impl_.section_x_range_, &from._impl_.section_x_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.section_y_range_) -
    reinterpret_cast<char*>(&_impl_.section_x_range_)) + sizeof(_impl_.section_y_range_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PRoomInfo)
}

inline void PRoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_index_){}
    , decltype(_impl_.room_bound_){nullptr}
    , decltype(_impl_.section_base_cell_){nullptr}
    , decltype(_impl_.section_x_range_){0u}
    , decltype(_impl_.section_y_range_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PRoomInfo::~PRoomInfo() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PRoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_index_.Destroy();
  if (this != internal_default_instance()) delete _impl_.room_bound_;
  if (this != internal_default_instance()) delete _impl_.section_base_cell_;
}

void PRoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PRoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_index_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.room_bound_ != nullptr) {
    delete _impl_.room_bound_;
  }
  _impl_.room_bound_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.section_base_cell_ != nullptr) {
    delete _impl_.section_base_cell_;
  }
  _impl_.section_base_cell_ = nullptr;
  ::memset(&_impl_.section_x_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.section_y_range_) -
      reinterpret_cast<char*>(&_impl_.section_x_range_)) + sizeof(_impl_.section_y_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ZimaProto.NavData.PRoomInfo.room_index"));
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.Map.PMapCellBound room_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_bound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.Map.PMapCell section_base_cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_base_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 section_x_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.section_x_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 section_y_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.section_y_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PRoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PRoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_index = 1;
  if (!this->_internal_room_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_index().data(), static_cast<int>(this->_internal_room_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PRoomInfo.room_index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_index(), target);
  }

  // .ZimaProto.Map.PMapCellBound room_bound = 2;
  if (this->_internal_has_room_bound()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room_bound(this),
        _Internal::room_bound(this).GetCachedSize(), target, stream);
  }

  // .ZimaProto.Map.PMapCell section_base_cell = 3;
  if (this->_internal_has_section_base_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::section_base_cell(this),
        _Internal::section_base_cell(this).GetCachedSize(), target, stream);
  }

  // uint32 section_x_range = 4;
  if (this->_internal_section_x_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_section_x_range(), target);
  }

  // uint32 section_y_range = 5;
  if (this->_internal_section_y_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_section_y_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PRoomInfo)
  return target;
}

size_t PRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PRoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_index = 1;
  if (!this->_internal_room_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_index());
  }

  // .ZimaProto.Map.PMapCellBound room_bound = 2;
  if (this->_internal_has_room_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_bound_);
  }

  // .ZimaProto.Map.PMapCell section_base_cell = 3;
  if (this->_internal_has_section_base_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.section_base_cell_);
  }

  // uint32 section_x_range = 4;
  if (this->_internal_section_x_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section_x_range());
  }

  // uint32 section_y_range = 5;
  if (this->_internal_section_y_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section_y_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PRoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRoomInfo::GetClassData() const { return &_class_data_; }


void PRoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PRoomInfo*>(&to_msg);
  auto& from = static_cast<const PRoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PRoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_index().empty()) {
    _this->_internal_set_room_index(from._internal_room_index());
  }
  if (from._internal_has_room_bound()) {
    _this->_internal_mutable_room_bound()->::ZimaProto::Map::PMapCellBound::MergeFrom(
        from._internal_room_bound());
  }
  if (from._internal_has_section_base_cell()) {
    _this->_internal_mutable_section_base_cell()->::ZimaProto::Map::PMapCell::MergeFrom(
        from._internal_section_base_cell());
  }
  if (from._internal_section_x_range() != 0) {
    _this->_internal_set_section_x_range(from._internal_section_x_range());
  }
  if (from._internal_section_y_range() != 0) {
    _this->_internal_set_section_y_range(from._internal_section_y_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRoomInfo::CopyFrom(const PRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoomInfo::IsInitialized() const {
  return true;
}

void PRoomInfo::InternalSwap(PRoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_index_, lhs_arena,
      &other->_impl_.room_index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRoomInfo, _impl_.section_y_range_)
      + sizeof(PRoomInfo::_impl_.section_y_range_)
      - PROTOBUF_FIELD_OFFSET(PRoomInfo, _impl_.room_bound_)>(
          reinterpret_cast<char*>(&_impl_.room_bound_),
          reinterpret_cast<char*>(&other->_impl_.room_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[0]);
}

// ===================================================================

class PVirtualWall::_Internal {
 public:
};

void PVirtualWall::clear_points() {
  _impl_.points_.Clear();
}
PVirtualWall::PVirtualWall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.NavData.PVirtualWall)
}
PVirtualWall::PVirtualWall(const PVirtualWall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PVirtualWall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.map_value_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_value().empty()) {
    _this->_impl_.map_value_.Set(from._internal_map_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.valid_, &from._impl_.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PVirtualWall)
}

inline void PVirtualWall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.map_value_){}
    , decltype(_impl_.valid_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PVirtualWall::~PVirtualWall() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PVirtualWall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PVirtualWall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.map_value_.Destroy();
}

void PVirtualWall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PVirtualWall::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PVirtualWall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.map_value_.ClearToEmpty();
  ::memset(&_impl_.valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PVirtualWall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.NavData.PUserBlockType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ZimaProto::NavData::PUserBlockType>(val));
        } else
          goto handle_unusual;
        continue;
      // string map_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_map_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ZimaProto.NavData.PVirtualWall.map_value"));
        } else
          goto handle_unusual;
        continue;
      // repeated .ZimaProto.Map.PMapPoint points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PVirtualWall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PVirtualWall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string map_value = 4;
  if (!this->_internal_map_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_value().data(), static_cast<int>(this->_internal_map_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PVirtualWall.map_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_value(), target);
  }

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PVirtualWall)
  return target;
}

size_t PVirtualWall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PVirtualWall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string map_value = 4;
  if (!this->_internal_map_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_value());
  }

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PVirtualWall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PVirtualWall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PVirtualWall::GetClassData() const { return &_class_data_; }


void PVirtualWall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PVirtualWall*>(&to_msg);
  auto& from = static_cast<const PVirtualWall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PVirtualWall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (!from._internal_map_value().empty()) {
    _this->_internal_set_map_value(from._internal_map_value());
  }
  if (from._internal_valid() != 0) {
    _this->_internal_set_valid(from._internal_valid());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PVirtualWall::CopyFrom(const PVirtualWall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PVirtualWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVirtualWall::IsInitialized() const {
  return true;
}

void PVirtualWall::InternalSwap(PVirtualWall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_value_, lhs_arena,
      &other->_impl_.map_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PVirtualWall, _impl_.type_)
      + sizeof(PVirtualWall::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PVirtualWall, _impl_.valid_)>(
          reinterpret_cast<char*>(&_impl_.valid_),
          reinterpret_cast<char*>(&other->_impl_.valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PVirtualWall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[1]);
}

// ===================================================================

class PBlockArea::_Internal {
 public:
};

void PBlockArea::clear_points() {
  _impl_.points_.Clear();
}
PBlockArea::PBlockArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.NavData.PBlockArea)
}
PBlockArea::PBlockArea(const PBlockArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBlockArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.map_value_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_value().empty()) {
    _this->_impl_.map_value_.Set(from._internal_map_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.valid_, &from._impl_.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PBlockArea)
}

inline void PBlockArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.map_value_){}
    , decltype(_impl_.valid_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBlockArea::~PBlockArea() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PBlockArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBlockArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.map_value_.Destroy();
}

void PBlockArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBlockArea::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PBlockArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.map_value_.ClearToEmpty();
  ::memset(&_impl_.valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBlockArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.NavData.PUserBlockType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ZimaProto::NavData::PUserBlockType>(val));
        } else
          goto handle_unusual;
        continue;
      // string map_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_map_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ZimaProto.NavData.PBlockArea.map_value"));
        } else
          goto handle_unusual;
        continue;
      // repeated .ZimaProto.Map.PMapPoint points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBlockArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PBlockArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string map_value = 4;
  if (!this->_internal_map_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_value().data(), static_cast<int>(this->_internal_map_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PBlockArea.map_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_value(), target);
  }

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PBlockArea)
  return target;
}

size_t PBlockArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PBlockArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string map_value = 4;
  if (!this->_internal_map_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_value());
  }

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBlockArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBlockArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBlockArea::GetClassData() const { return &_class_data_; }


void PBlockArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBlockArea*>(&to_msg);
  auto& from = static_cast<const PBlockArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PBlockArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (!from._internal_map_value().empty()) {
    _this->_internal_set_map_value(from._internal_map_value());
  }
  if (from._internal_valid() != 0) {
    _this->_internal_set_valid(from._internal_valid());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBlockArea::CopyFrom(const PBlockArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PBlockArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBlockArea::IsInitialized() const {
  return true;
}

void PBlockArea::InternalSwap(PBlockArea* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_value_, lhs_arena,
      &other->_impl_.map_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBlockArea, _impl_.type_)
      + sizeof(PBlockArea::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PBlockArea, _impl_.valid_)>(
          reinterpret_cast<char*>(&_impl_.valid_),
          reinterpret_cast<char*>(&other->_impl_.valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBlockArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[2]);
}

// ===================================================================

PNavData_RoomsInfoEntry_DoNotUse::PNavData_RoomsInfoEntry_DoNotUse() {}
PNavData_RoomsInfoEntry_DoNotUse::PNavData_RoomsInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PNavData_RoomsInfoEntry_DoNotUse::MergeFrom(const PNavData_RoomsInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PNavData_RoomsInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[3]);
}

// ===================================================================

PNavData_VirtualWallsEntry_DoNotUse::PNavData_VirtualWallsEntry_DoNotUse() {}
PNavData_VirtualWallsEntry_DoNotUse::PNavData_VirtualWallsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PNavData_VirtualWallsEntry_DoNotUse::MergeFrom(const PNavData_VirtualWallsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PNavData_VirtualWallsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[4]);
}

// ===================================================================

PNavData_BlockAreasEntry_DoNotUse::PNavData_BlockAreasEntry_DoNotUse() {}
PNavData_BlockAreasEntry_DoNotUse::PNavData_BlockAreasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PNavData_BlockAreasEntry_DoNotUse::MergeFrom(const PNavData_BlockAreasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PNavData_BlockAreasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[5]);
}

// ===================================================================

class PNavData::_Internal {
 public:
  static const ::ZimaProto::Map::PMultiLayerCharGridMap2D& nav_map(const PNavData* msg);
  static const ::ZimaProto::Map::PSlamValueGridMap2D& slam_map(const PNavData* msg);
  static const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D& probability_map(const PNavData* msg);
};

const ::ZimaProto::Map::PMultiLayerCharGridMap2D&
PNavData::_Internal::nav_map(const PNavData* msg) {
  return *msg->_impl_.nav_map_;
}
const ::ZimaProto::Map::PSlamValueGridMap2D&
PNavData::_Internal::slam_map(const PNavData* msg) {
  return *msg->_impl_.slam_map_;
}
const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D&
PNavData::_Internal::probability_map(const PNavData* msg) {
  return *msg->_impl_.probability_map_;
}
void PNavData::clear_nav_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.nav_map_ != nullptr) {
    delete _impl_.nav_map_;
  }
  _impl_.nav_map_ = nullptr;
}
void PNavData::clear_slam_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.slam_map_ != nullptr) {
    delete _impl_.slam_map_;
  }
  _impl_.slam_map_ = nullptr;
}
void PNavData::clear_probability_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.probability_map_ != nullptr) {
    delete _impl_.probability_map_;
  }
  _impl_.probability_map_ = nullptr;
}
PNavData::PNavData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PNavData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ZimaProto.NavData.PNavData)
}
PNavData::PNavData(const PNavData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PNavData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.rooms_info_)*/{}
    , /*decltype(_impl_.virtual_walls_)*/{}
    , /*decltype(_impl_.block_areas_)*/{}
    , decltype(_impl_.slam_map_filename_){}
    , decltype(_impl_.nav_map_){nullptr}
    , decltype(_impl_.slam_map_){nullptr}
    , decltype(_impl_.probability_map_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rooms_info_.MergeFrom(from._impl_.rooms_info_);
  _this->_impl_.virtual_walls_.MergeFrom(from._impl_.virtual_walls_);
  _this->_impl_.block_areas_.MergeFrom(from._impl_.block_areas_);
  _impl_.slam_map_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slam_map_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slam_map_filename().empty()) {
    _this->_impl_.slam_map_filename_.Set(from._internal_slam_map_filename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nav_map()) {
    _this->_impl_.nav_map_ = new ::ZimaProto::Map::PMultiLayerCharGridMap2D(*from._impl_.nav_map_);
  }
  if (from._internal_has_slam_map()) {
    _this->_impl_.slam_map_ = new ::ZimaProto::Map::PSlamValueGridMap2D(*from._impl_.slam_map_);
  }
  if (from._internal_has_probability_map()) {
    _this->_impl_.probability_map_ = new ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D(*from._impl_.probability_map_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PNavData)
}

inline void PNavData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.rooms_info_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.virtual_walls_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.block_areas_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.slam_map_filename_){}
    , decltype(_impl_.nav_map_){nullptr}
    , decltype(_impl_.slam_map_){nullptr}
    , decltype(_impl_.probability_map_){nullptr}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slam_map_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slam_map_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PNavData::~PNavData() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PNavData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PNavData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rooms_info_.Destruct();
  _impl_.rooms_info_.~MapField();
  _impl_.virtual_walls_.Destruct();
  _impl_.virtual_walls_.~MapField();
  _impl_.block_areas_.Destruct();
  _impl_.block_areas_.~MapField();
  _impl_.slam_map_filename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nav_map_;
  if (this != internal_default_instance()) delete _impl_.slam_map_;
  if (this != internal_default_instance()) delete _impl_.probability_map_;
}

void PNavData::ArenaDtor(void* object) {
  PNavData* _this = reinterpret_cast< PNavData* >(object);
  _this->_impl_.rooms_info_.Destruct();
  _this->_impl_.virtual_walls_.Destruct();
  _this->_impl_.block_areas_.Destruct();
}
void PNavData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PNavData::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PNavData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_info_.Clear();
  _impl_.virtual_walls_.Clear();
  _impl_.block_areas_.Clear();
  _impl_.slam_map_filename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.nav_map_ != nullptr) {
    delete _impl_.nav_map_;
  }
  _impl_.nav_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.slam_map_ != nullptr) {
    delete _impl_.slam_map_;
  }
  _impl_.slam_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.probability_map_ != nullptr) {
    delete _impl_.probability_map_;
  }
  _impl_.probability_map_ = nullptr;
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PNavData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nav_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slam_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_probability_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slam_map_filename = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_slam_map_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ZimaProto.NavData.PNavData.slam_map_filename"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.rooms_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.virtual_walls_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.block_areas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PNavData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PNavData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
  if (this->_internal_has_nav_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nav_map(this),
        _Internal::nav_map(this).GetCachedSize(), target, stream);
  }

  // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
  if (this->_internal_has_slam_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slam_map(this),
        _Internal::slam_map(this).GetCachedSize(), target, stream);
  }

  // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
  if (this->_internal_has_probability_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::probability_map(this),
        _Internal::probability_map(this).GetCachedSize(), target, stream);
  }

  // string slam_map_filename = 5;
  if (!this->_internal_slam_map_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slam_map_filename().data(), static_cast<int>(this->_internal_slam_map_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PNavData.slam_map_filename");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_slam_map_filename(), target);
  }

  // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
  if (!this->_internal_rooms_info().empty()) {
    using MapType = ::_pb::Map<std::string, ::ZimaProto::NavData::PRoomInfo>;
    using WireHelper = PNavData_RoomsInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_rooms_info();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ZimaProto.NavData.PNavData.RoomsInfoEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
  if (!this->_internal_virtual_walls().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::ZimaProto::NavData::PVirtualWall>;
    using WireHelper = PNavData_VirtualWallsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_virtual_walls();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
  if (!this->_internal_block_areas().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::ZimaProto::NavData::PBlockArea>;
    using WireHelper = PNavData_BlockAreasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_block_areas();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PNavData)
  return target;
}

size_t PNavData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PNavData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rooms_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ZimaProto::NavData::PRoomInfo >::const_iterator
      it = this->_internal_rooms_info().begin();
      it != this->_internal_rooms_info().end(); ++it) {
    total_size += PNavData_RoomsInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_virtual_walls_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::ZimaProto::NavData::PVirtualWall >::const_iterator
      it = this->_internal_virtual_walls().begin();
      it != this->_internal_virtual_walls().end(); ++it) {
    total_size += PNavData_VirtualWallsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_block_areas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::ZimaProto::NavData::PBlockArea >::const_iterator
      it = this->_internal_block_areas().begin();
      it != this->_internal_block_areas().end(); ++it) {
    total_size += PNavData_BlockAreasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string slam_map_filename = 5;
  if (!this->_internal_slam_map_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slam_map_filename());
  }

  // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
  if (this->_internal_has_nav_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nav_map_);
  }

  // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
  if (this->_internal_has_slam_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slam_map_);
  }

  // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
  if (this->_internal_has_probability_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.probability_map_);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PNavData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PNavData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PNavData::GetClassData() const { return &_class_data_; }


void PNavData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PNavData*>(&to_msg);
  auto& from = static_cast<const PNavData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PNavData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rooms_info_.MergeFrom(from._impl_.rooms_info_);
  _this->_impl_.virtual_walls_.MergeFrom(from._impl_.virtual_walls_);
  _this->_impl_.block_areas_.MergeFrom(from._impl_.block_areas_);
  if (!from._internal_slam_map_filename().empty()) {
    _this->_internal_set_slam_map_filename(from._internal_slam_map_filename());
  }
  if (from._internal_has_nav_map()) {
    _this->_internal_mutable_nav_map()->::ZimaProto::Map::PMultiLayerCharGridMap2D::MergeFrom(
        from._internal_nav_map());
  }
  if (from._internal_has_slam_map()) {
    _this->_internal_mutable_slam_map()->::ZimaProto::Map::PSlamValueGridMap2D::MergeFrom(
        from._internal_slam_map());
  }
  if (from._internal_has_probability_map()) {
    _this->_internal_mutable_probability_map()->::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D::MergeFrom(
        from._internal_probability_map());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PNavData::CopyFrom(const PNavData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PNavData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNavData::IsInitialized() const {
  return true;
}

void PNavData::InternalSwap(PNavData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rooms_info_.InternalSwap(&other->_impl_.rooms_info_);
  _impl_.virtual_walls_.InternalSwap(&other->_impl_.virtual_walls_);
  _impl_.block_areas_.InternalSwap(&other->_impl_.block_areas_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slam_map_filename_, lhs_arena,
      &other->_impl_.slam_map_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PNavData, _impl_.index_)
      + sizeof(PNavData::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(PNavData, _impl_.nav_map_)>(
          reinterpret_cast<char*>(&_impl_.nav_map_),
          reinterpret_cast<char*>(&other->_impl_.nav_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PNavData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2fnav_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2fnav_5fdata_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace NavData
}  // namespace ZimaProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PRoomInfo*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PRoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PRoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PVirtualWall*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PVirtualWall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PVirtualWall >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PBlockArea*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PBlockArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PBlockArea >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PNavData_RoomsInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PNavData_VirtualWallsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PNavData_BlockAreasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::NavData::PNavData*
Arena::CreateMaybeMessage< ::ZimaProto::NavData::PNavData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::NavData::PNavData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
