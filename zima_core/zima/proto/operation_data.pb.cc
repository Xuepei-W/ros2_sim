// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/operation_data.proto

#include "zima/proto/operation_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ZimaProto {
namespace OperationData {
PROTOBUF_CONSTEXPR PStepPoint::PStepPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PStepPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PStepPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PStepPointDefaultTypeInternal() {}
  union {
    PStepPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PStepPointDefaultTypeInternal _PStepPoint_default_instance_;
PROTOBUF_CONSTEXPR POperationData::POperationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_points_)*/{}
  , /*decltype(_impl_.nav_data_)*/nullptr
  , /*decltype(_impl_.start_point_)*/nullptr
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.operation_type_)*/0
  , /*decltype(_impl_.operation_result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct POperationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR POperationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~POperationDataDefaultTypeInternal() {}
  union {
    POperationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 POperationDataDefaultTypeInternal _POperationData_default_instance_;
PROTOBUF_CONSTEXPR PCleaningRecordSummary::PCleaningRecordSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.area_size_)*/0
  , /*decltype(_impl_.operation_type_)*/0
  , /*decltype(_impl_.operation_result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PCleaningRecordSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCleaningRecordSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCleaningRecordSummaryDefaultTypeInternal() {}
  union {
    PCleaningRecordSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCleaningRecordSummaryDefaultTypeInternal _PCleaningRecordSummary_default_instance_;
PROTOBUF_CONSTEXPR PCleaningRecordSummaryList::PCleaningRecordSummaryList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_summary_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PCleaningRecordSummaryListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCleaningRecordSummaryListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCleaningRecordSummaryListDefaultTypeInternal() {}
  union {
    PCleaningRecordSummaryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCleaningRecordSummaryListDefaultTypeInternal _PCleaningRecordSummaryList_default_instance_;
}  // namespace OperationData
}  // namespace ZimaProto
static ::_pb::Metadata file_level_metadata_zima_2fproto_2foperation_5fdata_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_zima_2fproto_2foperation_5fdata_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zima_2fproto_2foperation_5fdata_2eproto = nullptr;

const uint32_t TableStruct_zima_2fproto_2foperation_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PStepPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PStepPoint, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PStepPoint, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.nav_data_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.step_points_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.start_point_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.operation_type_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::POperationData, _impl_.operation_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummary, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummary, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummary, _impl_.area_size_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummary, _impl_.operation_type_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummary, _impl_.operation_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummaryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::OperationData::PCleaningRecordSummaryList, _impl_.record_summary_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ZimaProto::OperationData::PStepPoint)},
  { 8, -1, -1, sizeof(::ZimaProto::OperationData::POperationData)},
  { 21, -1, -1, sizeof(::ZimaProto::OperationData::PCleaningRecordSummary)},
  { 32, -1, -1, sizeof(::ZimaProto::OperationData::PCleaningRecordSummaryList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ZimaProto::OperationData::_PStepPoint_default_instance_._instance,
  &::ZimaProto::OperationData::_POperationData_default_instance_._instance,
  &::ZimaProto::OperationData::_PCleaningRecordSummary_default_instance_._instance,
  &::ZimaProto::OperationData::_PCleaningRecordSummaryList_default_instance_._instance,
};

const char descriptor_table_protodef_zima_2fproto_2foperation_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037zima/proto/operation_data.proto\022\027ZimaP"
  "roto.OperationData\032\024zima/proto/map.proto"
  "\032\031zima/proto/nav_data.proto\"l\n\nPStepPoin"
  "t\022\'\n\005point\030\001 \001(\0132\030.ZimaProto.Map.PMapPoi"
  "nt\0225\n\004type\030\002 \001(\0162\'.ZimaProto.OperationDa"
  "ta.PStepPointType\"\324\002\n\016POperationData\022-\n\010"
  "nav_data\030\001 \001(\0132\033.ZimaProto.NavData.PNavD"
  "ata\022\022\n\nstart_time\030\002 \001(\001\0228\n\013step_points\030\003"
  " \003(\0132#.ZimaProto.OperationData.PStepPoin"
  "t\022-\n\013start_point\030\004 \001(\0132\030.ZimaProto.Map.P"
  "MapPoint\022\020\n\010duration\030\005 \001(\001\022\?\n\016operation_"
  "type\030\006 \001(\0162\'.ZimaProto.OperationData.POp"
  "erationType\022C\n\020operation_result\030\007 \001(\0162)."
  "ZimaProto.OperationData.POperationResult"
  "\"\327\001\n\026PCleaningRecordSummary\022\022\n\nstart_tim"
  "e\030\001 \001(\r\022\020\n\010duration\030\002 \001(\r\022\021\n\tarea_size\030\003"
  " \001(\001\022\?\n\016operation_type\030\004 \001(\0162\'.ZimaProto"
  ".OperationData.POperationType\022C\n\020operati"
  "on_result\030\005 \001(\0162).ZimaProto.OperationDat"
  "a.POperationResult\"j\n\032PCleaningRecordSum"
  "maryList\022L\n\023record_summary_list\030\001 \003(\0132/."
  "ZimaProto.OperationData.PCleaningRecordS"
  "ummary*\177\n\016POperationType\022\r\n\tkNullType\020\000\022"
  "\025\n\021kAllHouseCleaning\020\001\022\027\n\023kSelectRoomCle"
  "aning\020\002\022\027\n\023kSelectAreaCleaning\020\003\022\025\n\021kAll"
  "HouseScanning\020\004*d\n\020POperationResult\022\017\n\013k"
  "NullResult\020\000\022\014\n\010kStopped\020\001\022\027\n\023kFinishAut"
  "oCleaning\020\002\022\030\n\024kFinishAutoScanHouse\020\003*1\n"
  "\016PStepPointType\022\017\n\013kNormalStep\020\000\022\016\n\nkPau"
  "seStep\020\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_deps[2] = {
  &::descriptor_table_zima_2fproto_2fmap_2eproto,
  &::descriptor_table_zima_2fproto_2fnav_5fdata_2eproto,
};
static ::_pbi::once_flag descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zima_2fproto_2foperation_5fdata_2eproto = {
    false, false, 1176, descriptor_table_protodef_zima_2fproto_2foperation_5fdata_2eproto,
    "zima/proto/operation_data.proto",
    &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_once, descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_zima_2fproto_2foperation_5fdata_2eproto::offsets,
    file_level_metadata_zima_2fproto_2foperation_5fdata_2eproto, file_level_enum_descriptors_zima_2fproto_2foperation_5fdata_2eproto,
    file_level_service_descriptors_zima_2fproto_2foperation_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_getter() {
  return &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zima_2fproto_2foperation_5fdata_2eproto(&descriptor_table_zima_2fproto_2foperation_5fdata_2eproto);
namespace ZimaProto {
namespace OperationData {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* POperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zima_2fproto_2foperation_5fdata_2eproto);
  return file_level_enum_descriptors_zima_2fproto_2foperation_5fdata_2eproto[0];
}
bool POperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* POperationResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zima_2fproto_2foperation_5fdata_2eproto);
  return file_level_enum_descriptors_zima_2fproto_2foperation_5fdata_2eproto[1];
}
bool POperationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PStepPointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zima_2fproto_2foperation_5fdata_2eproto);
  return file_level_enum_descriptors_zima_2fproto_2foperation_5fdata_2eproto[2];
}
bool PStepPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PStepPoint::_Internal {
 public:
  static const ::ZimaProto::Map::PMapPoint& point(const PStepPoint* msg);
};

const ::ZimaProto::Map::PMapPoint&
PStepPoint::_Internal::point(const PStepPoint* msg) {
  return *msg->_impl_.point_;
}
void PStepPoint::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
PStepPoint::PStepPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.OperationData.PStepPoint)
}
PStepPoint::PStepPoint(const PStepPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PStepPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::ZimaProto::Map::PMapPoint(*from._impl_.point_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ZimaProto.OperationData.PStepPoint)
}

inline void PStepPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PStepPoint::~PStepPoint() {
  // @@protoc_insertion_point(destructor:ZimaProto.OperationData.PStepPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PStepPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.point_;
}

void PStepPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PStepPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.OperationData.PStepPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PStepPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ZimaProto.Map.PMapPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.OperationData.PStepPointType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ZimaProto::OperationData::PStepPointType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PStepPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.OperationData.PStepPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PMapPoint point = 1;
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  // .ZimaProto.OperationData.PStepPointType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.OperationData.PStepPoint)
  return target;
}

size_t PStepPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.OperationData.PStepPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ZimaProto.Map.PMapPoint point = 1;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  // .ZimaProto.OperationData.PStepPointType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PStepPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PStepPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PStepPoint::GetClassData() const { return &_class_data_; }


void PStepPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PStepPoint*>(&to_msg);
  auto& from = static_cast<const PStepPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.OperationData.PStepPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::ZimaProto::Map::PMapPoint::MergeFrom(
        from._internal_point());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PStepPoint::CopyFrom(const PStepPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.OperationData.PStepPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStepPoint::IsInitialized() const {
  return true;
}

void PStepPoint::InternalSwap(PStepPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PStepPoint, _impl_.type_)
      + sizeof(PStepPoint::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PStepPoint, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PStepPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2foperation_5fdata_2eproto[0]);
}

// ===================================================================

class POperationData::_Internal {
 public:
  static const ::ZimaProto::NavData::PNavData& nav_data(const POperationData* msg);
  static const ::ZimaProto::Map::PMapPoint& start_point(const POperationData* msg);
};

const ::ZimaProto::NavData::PNavData&
POperationData::_Internal::nav_data(const POperationData* msg) {
  return *msg->_impl_.nav_data_;
}
const ::ZimaProto::Map::PMapPoint&
POperationData::_Internal::start_point(const POperationData* msg) {
  return *msg->_impl_.start_point_;
}
void POperationData::clear_nav_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.nav_data_ != nullptr) {
    delete _impl_.nav_data_;
  }
  _impl_.nav_data_ = nullptr;
}
void POperationData::clear_start_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_point_ != nullptr) {
    delete _impl_.start_point_;
  }
  _impl_.start_point_ = nullptr;
}
POperationData::POperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.OperationData.POperationData)
}
POperationData::POperationData(const POperationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  POperationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_points_){from._impl_.step_points_}
    , decltype(_impl_.nav_data_){nullptr}
    , decltype(_impl_.start_point_){nullptr}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.operation_type_){}
    , decltype(_impl_.operation_result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nav_data()) {
    _this->_impl_.nav_data_ = new ::ZimaProto::NavData::PNavData(*from._impl_.nav_data_);
  }
  if (from._internal_has_start_point()) {
    _this->_impl_.start_point_ = new ::ZimaProto::Map::PMapPoint(*from._impl_.start_point_);
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_result_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.operation_result_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.OperationData.POperationData)
}

inline void POperationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_points_){arena}
    , decltype(_impl_.nav_data_){nullptr}
    , decltype(_impl_.start_point_){nullptr}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.operation_type_){0}
    , decltype(_impl_.operation_result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

POperationData::~POperationData() {
  // @@protoc_insertion_point(destructor:ZimaProto.OperationData.POperationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void POperationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.step_points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.nav_data_;
  if (this != internal_default_instance()) delete _impl_.start_point_;
}

void POperationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void POperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.OperationData.POperationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.step_points_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.nav_data_ != nullptr) {
    delete _impl_.nav_data_;
  }
  _impl_.nav_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.start_point_ != nullptr) {
    delete _impl_.start_point_;
  }
  _impl_.start_point_ = nullptr;
  ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.operation_result_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.operation_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* POperationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ZimaProto.NavData.PNavData nav_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nav_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_step_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.Map.PMapPoint start_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.OperationData.POperationType operation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation_type(static_cast<::ZimaProto::OperationData::POperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.OperationData.POperationResult operation_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation_result(static_cast<::ZimaProto::OperationData::POperationResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* POperationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.OperationData.POperationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.NavData.PNavData nav_data = 1;
  if (this->_internal_has_nav_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nav_data(this),
        _Internal::nav_data(this).GetCachedSize(), target, stream);
  }

  // double start_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time = this->_internal_start_time();
  uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_time(), target);
  }

  // repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_step_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_step_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ZimaProto.Map.PMapPoint start_point = 4;
  if (this->_internal_has_start_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::start_point(this),
        _Internal::start_point(this).GetCachedSize(), target, stream);
  }

  // double duration = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_duration(), target);
  }

  // .ZimaProto.OperationData.POperationType operation_type = 6;
  if (this->_internal_operation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_operation_type(), target);
  }

  // .ZimaProto.OperationData.POperationResult operation_result = 7;
  if (this->_internal_operation_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_operation_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.OperationData.POperationData)
  return target;
}

size_t POperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.OperationData.POperationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
  total_size += 1UL * this->_internal_step_points_size();
  for (const auto& msg : this->_impl_.step_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ZimaProto.NavData.PNavData nav_data = 1;
  if (this->_internal_has_nav_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nav_data_);
  }

  // .ZimaProto.Map.PMapPoint start_point = 4;
  if (this->_internal_has_start_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_point_);
  }

  // double start_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time = this->_internal_start_time();
  uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    total_size += 1 + 8;
  }

  // double duration = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 8;
  }

  // .ZimaProto.OperationData.POperationType operation_type = 6;
  if (this->_internal_operation_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_type());
  }

  // .ZimaProto.OperationData.POperationResult operation_result = 7;
  if (this->_internal_operation_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData POperationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    POperationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*POperationData::GetClassData() const { return &_class_data_; }


void POperationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<POperationData*>(&to_msg);
  auto& from = static_cast<const POperationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.OperationData.POperationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.step_points_.MergeFrom(from._impl_.step_points_);
  if (from._internal_has_nav_data()) {
    _this->_internal_mutable_nav_data()->::ZimaProto::NavData::PNavData::MergeFrom(
        from._internal_nav_data());
  }
  if (from._internal_has_start_point()) {
    _this->_internal_mutable_start_point()->::ZimaProto::Map::PMapPoint::MergeFrom(
        from._internal_start_point());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_time = from._internal_start_time();
  uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration = from._internal_duration();
  uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_operation_type() != 0) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (from._internal_operation_result() != 0) {
    _this->_internal_set_operation_result(from._internal_operation_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void POperationData::CopyFrom(const POperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.OperationData.POperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POperationData::IsInitialized() const {
  return true;
}

void POperationData::InternalSwap(POperationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.step_points_.InternalSwap(&other->_impl_.step_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(POperationData, _impl_.operation_result_)
      + sizeof(POperationData::_impl_.operation_result_)
      - PROTOBUF_FIELD_OFFSET(POperationData, _impl_.nav_data_)>(
          reinterpret_cast<char*>(&_impl_.nav_data_),
          reinterpret_cast<char*>(&other->_impl_.nav_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata POperationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2foperation_5fdata_2eproto[1]);
}

// ===================================================================

class PCleaningRecordSummary::_Internal {
 public:
};

PCleaningRecordSummary::PCleaningRecordSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.OperationData.PCleaningRecordSummary)
}
PCleaningRecordSummary::PCleaningRecordSummary(const PCleaningRecordSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PCleaningRecordSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.area_size_){}
    , decltype(_impl_.operation_type_){}
    , decltype(_impl_.operation_result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_result_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.operation_result_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.OperationData.PCleaningRecordSummary)
}

inline void PCleaningRecordSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.area_size_){0}
    , decltype(_impl_.operation_type_){0}
    , decltype(_impl_.operation_result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PCleaningRecordSummary::~PCleaningRecordSummary() {
  // @@protoc_insertion_point(destructor:ZimaProto.OperationData.PCleaningRecordSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCleaningRecordSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCleaningRecordSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PCleaningRecordSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.OperationData.PCleaningRecordSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.operation_result_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.operation_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCleaningRecordSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.area_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.OperationData.POperationType operation_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation_type(static_cast<::ZimaProto::OperationData::POperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.OperationData.POperationResult operation_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation_result(static_cast<::ZimaProto::OperationData::POperationResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCleaningRecordSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.OperationData.PCleaningRecordSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_time = 1;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_time(), target);
  }

  // uint32 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // double area_size = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_size = this->_internal_area_size();
  uint64_t raw_area_size;
  memcpy(&raw_area_size, &tmp_area_size, sizeof(tmp_area_size));
  if (raw_area_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_area_size(), target);
  }

  // .ZimaProto.OperationData.POperationType operation_type = 4;
  if (this->_internal_operation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_operation_type(), target);
  }

  // .ZimaProto.OperationData.POperationResult operation_result = 5;
  if (this->_internal_operation_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_operation_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.OperationData.PCleaningRecordSummary)
  return target;
}

size_t PCleaningRecordSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.OperationData.PCleaningRecordSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_time = 1;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
  }

  // uint32 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  // double area_size = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_size = this->_internal_area_size();
  uint64_t raw_area_size;
  memcpy(&raw_area_size, &tmp_area_size, sizeof(tmp_area_size));
  if (raw_area_size != 0) {
    total_size += 1 + 8;
  }

  // .ZimaProto.OperationData.POperationType operation_type = 4;
  if (this->_internal_operation_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_type());
  }

  // .ZimaProto.OperationData.POperationResult operation_result = 5;
  if (this->_internal_operation_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCleaningRecordSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PCleaningRecordSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCleaningRecordSummary::GetClassData() const { return &_class_data_; }


void PCleaningRecordSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PCleaningRecordSummary*>(&to_msg);
  auto& from = static_cast<const PCleaningRecordSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.OperationData.PCleaningRecordSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area_size = from._internal_area_size();
  uint64_t raw_area_size;
  memcpy(&raw_area_size, &tmp_area_size, sizeof(tmp_area_size));
  if (raw_area_size != 0) {
    _this->_internal_set_area_size(from._internal_area_size());
  }
  if (from._internal_operation_type() != 0) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (from._internal_operation_result() != 0) {
    _this->_internal_set_operation_result(from._internal_operation_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCleaningRecordSummary::CopyFrom(const PCleaningRecordSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.OperationData.PCleaningRecordSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCleaningRecordSummary::IsInitialized() const {
  return true;
}

void PCleaningRecordSummary::InternalSwap(PCleaningRecordSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCleaningRecordSummary, _impl_.operation_result_)
      + sizeof(PCleaningRecordSummary::_impl_.operation_result_)
      - PROTOBUF_FIELD_OFFSET(PCleaningRecordSummary, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCleaningRecordSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2foperation_5fdata_2eproto[2]);
}

// ===================================================================

class PCleaningRecordSummaryList::_Internal {
 public:
};

PCleaningRecordSummaryList::PCleaningRecordSummaryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.OperationData.PCleaningRecordSummaryList)
}
PCleaningRecordSummaryList::PCleaningRecordSummaryList(const PCleaningRecordSummaryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PCleaningRecordSummaryList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_summary_list_){from._impl_.record_summary_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZimaProto.OperationData.PCleaningRecordSummaryList)
}

inline void PCleaningRecordSummaryList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_summary_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PCleaningRecordSummaryList::~PCleaningRecordSummaryList() {
  // @@protoc_insertion_point(destructor:ZimaProto.OperationData.PCleaningRecordSummaryList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCleaningRecordSummaryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_summary_list_.~RepeatedPtrField();
}

void PCleaningRecordSummaryList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PCleaningRecordSummaryList::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.OperationData.PCleaningRecordSummaryList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_summary_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCleaningRecordSummaryList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_summary_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCleaningRecordSummaryList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.OperationData.PCleaningRecordSummaryList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_summary_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_record_summary_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.OperationData.PCleaningRecordSummaryList)
  return target;
}

size_t PCleaningRecordSummaryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.OperationData.PCleaningRecordSummaryList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
  total_size += 1UL * this->_internal_record_summary_list_size();
  for (const auto& msg : this->_impl_.record_summary_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCleaningRecordSummaryList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PCleaningRecordSummaryList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCleaningRecordSummaryList::GetClassData() const { return &_class_data_; }


void PCleaningRecordSummaryList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PCleaningRecordSummaryList*>(&to_msg);
  auto& from = static_cast<const PCleaningRecordSummaryList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.OperationData.PCleaningRecordSummaryList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_summary_list_.MergeFrom(from._impl_.record_summary_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCleaningRecordSummaryList::CopyFrom(const PCleaningRecordSummaryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.OperationData.PCleaningRecordSummaryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCleaningRecordSummaryList::IsInitialized() const {
  return true;
}

void PCleaningRecordSummaryList::InternalSwap(PCleaningRecordSummaryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.record_summary_list_.InternalSwap(&other->_impl_.record_summary_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PCleaningRecordSummaryList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_getter, &descriptor_table_zima_2fproto_2foperation_5fdata_2eproto_once,
      file_level_metadata_zima_2fproto_2foperation_5fdata_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace OperationData
}  // namespace ZimaProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZimaProto::OperationData::PStepPoint*
Arena::CreateMaybeMessage< ::ZimaProto::OperationData::PStepPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::OperationData::PStepPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::OperationData::POperationData*
Arena::CreateMaybeMessage< ::ZimaProto::OperationData::POperationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::OperationData::POperationData >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::OperationData::PCleaningRecordSummary*
Arena::CreateMaybeMessage< ::ZimaProto::OperationData::PCleaningRecordSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::OperationData::PCleaningRecordSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::OperationData::PCleaningRecordSummaryList*
Arena::CreateMaybeMessage< ::ZimaProto::OperationData::PCleaningRecordSummaryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::OperationData::PCleaningRecordSummaryList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
