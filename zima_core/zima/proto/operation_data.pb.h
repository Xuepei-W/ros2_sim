// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/operation_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zima_2fproto_2foperation_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zima_2fproto_2foperation_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "zima/proto/map.pb.h"
#include "zima/proto/nav_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zima_2fproto_2foperation_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zima_2fproto_2foperation_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zima_2fproto_2foperation_5fdata_2eproto;
namespace ZimaProto {
namespace OperationData {
class PCleaningRecordSummary;
struct PCleaningRecordSummaryDefaultTypeInternal;
extern PCleaningRecordSummaryDefaultTypeInternal _PCleaningRecordSummary_default_instance_;
class PCleaningRecordSummaryList;
struct PCleaningRecordSummaryListDefaultTypeInternal;
extern PCleaningRecordSummaryListDefaultTypeInternal _PCleaningRecordSummaryList_default_instance_;
class POperationData;
struct POperationDataDefaultTypeInternal;
extern POperationDataDefaultTypeInternal _POperationData_default_instance_;
class PStepPoint;
struct PStepPointDefaultTypeInternal;
extern PStepPointDefaultTypeInternal _PStepPoint_default_instance_;
}  // namespace OperationData
}  // namespace ZimaProto
PROTOBUF_NAMESPACE_OPEN
template<> ::ZimaProto::OperationData::PCleaningRecordSummary* Arena::CreateMaybeMessage<::ZimaProto::OperationData::PCleaningRecordSummary>(Arena*);
template<> ::ZimaProto::OperationData::PCleaningRecordSummaryList* Arena::CreateMaybeMessage<::ZimaProto::OperationData::PCleaningRecordSummaryList>(Arena*);
template<> ::ZimaProto::OperationData::POperationData* Arena::CreateMaybeMessage<::ZimaProto::OperationData::POperationData>(Arena*);
template<> ::ZimaProto::OperationData::PStepPoint* Arena::CreateMaybeMessage<::ZimaProto::OperationData::PStepPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZimaProto {
namespace OperationData {

enum POperationType : int {
  kNullType = 0,
  kAllHouseCleaning = 1,
  kSelectRoomCleaning = 2,
  kSelectAreaCleaning = 3,
  kAllHouseScanning = 4,
  POperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  POperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool POperationType_IsValid(int value);
constexpr POperationType POperationType_MIN = kNullType;
constexpr POperationType POperationType_MAX = kAllHouseScanning;
constexpr int POperationType_ARRAYSIZE = POperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* POperationType_descriptor();
template<typename T>
inline const std::string& POperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, POperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function POperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    POperationType_descriptor(), enum_t_value);
}
inline bool POperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, POperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<POperationType>(
    POperationType_descriptor(), name, value);
}
enum POperationResult : int {
  kNullResult = 0,
  kStopped = 1,
  kFinishAutoCleaning = 2,
  kFinishAutoScanHouse = 3,
  POperationResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  POperationResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool POperationResult_IsValid(int value);
constexpr POperationResult POperationResult_MIN = kNullResult;
constexpr POperationResult POperationResult_MAX = kFinishAutoScanHouse;
constexpr int POperationResult_ARRAYSIZE = POperationResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* POperationResult_descriptor();
template<typename T>
inline const std::string& POperationResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, POperationResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function POperationResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    POperationResult_descriptor(), enum_t_value);
}
inline bool POperationResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, POperationResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<POperationResult>(
    POperationResult_descriptor(), name, value);
}
enum PStepPointType : int {
  kNormalStep = 0,
  kPauseStep = 1,
  PStepPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PStepPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PStepPointType_IsValid(int value);
constexpr PStepPointType PStepPointType_MIN = kNormalStep;
constexpr PStepPointType PStepPointType_MAX = kPauseStep;
constexpr int PStepPointType_ARRAYSIZE = PStepPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PStepPointType_descriptor();
template<typename T>
inline const std::string& PStepPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PStepPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PStepPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PStepPointType_descriptor(), enum_t_value);
}
inline bool PStepPointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PStepPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PStepPointType>(
    PStepPointType_descriptor(), name, value);
}
// ===================================================================

class PStepPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.PStepPoint) */ {
 public:
  inline PStepPoint() : PStepPoint(nullptr) {}
  ~PStepPoint() override;
  explicit PROTOBUF_CONSTEXPR PStepPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PStepPoint(const PStepPoint& from);
  PStepPoint(PStepPoint&& from) noexcept
    : PStepPoint() {
    *this = ::std::move(from);
  }

  inline PStepPoint& operator=(const PStepPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PStepPoint& operator=(PStepPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PStepPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PStepPoint* internal_default_instance() {
    return reinterpret_cast<const PStepPoint*>(
               &_PStepPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PStepPoint& a, PStepPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PStepPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PStepPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PStepPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PStepPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PStepPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PStepPoint& from) {
    PStepPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PStepPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZimaProto.OperationData.PStepPoint";
  }
  protected:
  explicit PStepPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .ZimaProto.Map.PMapPoint point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::ZimaProto::Map::PMapPoint& point() const;
  PROTOBUF_NODISCARD ::ZimaProto::Map::PMapPoint* release_point();
  ::ZimaProto::Map::PMapPoint* mutable_point();
  void set_allocated_point(::ZimaProto::Map::PMapPoint* point);
  private:
  const ::ZimaProto::Map::PMapPoint& _internal_point() const;
  ::ZimaProto::Map::PMapPoint* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::ZimaProto::Map::PMapPoint* point);
  ::ZimaProto::Map::PMapPoint* unsafe_arena_release_point();

  // .ZimaProto.OperationData.PStepPointType type = 2;
  void clear_type();
  ::ZimaProto::OperationData::PStepPointType type() const;
  void set_type(::ZimaProto::OperationData::PStepPointType value);
  private:
  ::ZimaProto::OperationData::PStepPointType _internal_type() const;
  void _internal_set_type(::ZimaProto::OperationData::PStepPointType value);
  public:

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.PStepPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ZimaProto::Map::PMapPoint* point_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zima_2fproto_2foperation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class POperationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.POperationData) */ {
 public:
  inline POperationData() : POperationData(nullptr) {}
  ~POperationData() override;
  explicit PROTOBUF_CONSTEXPR POperationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  POperationData(const POperationData& from);
  POperationData(POperationData&& from) noexcept
    : POperationData() {
    *this = ::std::move(from);
  }

  inline POperationData& operator=(const POperationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline POperationData& operator=(POperationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const POperationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const POperationData* internal_default_instance() {
    return reinterpret_cast<const POperationData*>(
               &_POperationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(POperationData& a, POperationData& b) {
    a.Swap(&b);
  }
  inline void Swap(POperationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(POperationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  POperationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<POperationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const POperationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const POperationData& from) {
    POperationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(POperationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZimaProto.OperationData.POperationData";
  }
  protected:
  explicit POperationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepPointsFieldNumber = 3,
    kNavDataFieldNumber = 1,
    kStartPointFieldNumber = 4,
    kStartTimeFieldNumber = 2,
    kDurationFieldNumber = 5,
    kOperationTypeFieldNumber = 6,
    kOperationResultFieldNumber = 7,
  };
  // repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
  int step_points_size() const;
  private:
  int _internal_step_points_size() const;
  public:
  void clear_step_points();
  ::ZimaProto::OperationData::PStepPoint* mutable_step_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >*
      mutable_step_points();
  private:
  const ::ZimaProto::OperationData::PStepPoint& _internal_step_points(int index) const;
  ::ZimaProto::OperationData::PStepPoint* _internal_add_step_points();
  public:
  const ::ZimaProto::OperationData::PStepPoint& step_points(int index) const;
  ::ZimaProto::OperationData::PStepPoint* add_step_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >&
      step_points() const;

  // .ZimaProto.NavData.PNavData nav_data = 1;
  bool has_nav_data() const;
  private:
  bool _internal_has_nav_data() const;
  public:
  void clear_nav_data();
  const ::ZimaProto::NavData::PNavData& nav_data() const;
  PROTOBUF_NODISCARD ::ZimaProto::NavData::PNavData* release_nav_data();
  ::ZimaProto::NavData::PNavData* mutable_nav_data();
  void set_allocated_nav_data(::ZimaProto::NavData::PNavData* nav_data);
  private:
  const ::ZimaProto::NavData::PNavData& _internal_nav_data() const;
  ::ZimaProto::NavData::PNavData* _internal_mutable_nav_data();
  public:
  void unsafe_arena_set_allocated_nav_data(
      ::ZimaProto::NavData::PNavData* nav_data);
  ::ZimaProto::NavData::PNavData* unsafe_arena_release_nav_data();

  // .ZimaProto.Map.PMapPoint start_point = 4;
  bool has_start_point() const;
  private:
  bool _internal_has_start_point() const;
  public:
  void clear_start_point();
  const ::ZimaProto::Map::PMapPoint& start_point() const;
  PROTOBUF_NODISCARD ::ZimaProto::Map::PMapPoint* release_start_point();
  ::ZimaProto::Map::PMapPoint* mutable_start_point();
  void set_allocated_start_point(::ZimaProto::Map::PMapPoint* start_point);
  private:
  const ::ZimaProto::Map::PMapPoint& _internal_start_point() const;
  ::ZimaProto::Map::PMapPoint* _internal_mutable_start_point();
  public:
  void unsafe_arena_set_allocated_start_point(
      ::ZimaProto::Map::PMapPoint* start_point);
  ::ZimaProto::Map::PMapPoint* unsafe_arena_release_start_point();

  // double start_time = 2;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // double duration = 5;
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // .ZimaProto.OperationData.POperationType operation_type = 6;
  void clear_operation_type();
  ::ZimaProto::OperationData::POperationType operation_type() const;
  void set_operation_type(::ZimaProto::OperationData::POperationType value);
  private:
  ::ZimaProto::OperationData::POperationType _internal_operation_type() const;
  void _internal_set_operation_type(::ZimaProto::OperationData::POperationType value);
  public:

  // .ZimaProto.OperationData.POperationResult operation_result = 7;
  void clear_operation_result();
  ::ZimaProto::OperationData::POperationResult operation_result() const;
  void set_operation_result(::ZimaProto::OperationData::POperationResult value);
  private:
  ::ZimaProto::OperationData::POperationResult _internal_operation_result() const;
  void _internal_set_operation_result(::ZimaProto::OperationData::POperationResult value);
  public:

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.POperationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint > step_points_;
    ::ZimaProto::NavData::PNavData* nav_data_;
    ::ZimaProto::Map::PMapPoint* start_point_;
    double start_time_;
    double duration_;
    int operation_type_;
    int operation_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zima_2fproto_2foperation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PCleaningRecordSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.PCleaningRecordSummary) */ {
 public:
  inline PCleaningRecordSummary() : PCleaningRecordSummary(nullptr) {}
  ~PCleaningRecordSummary() override;
  explicit PROTOBUF_CONSTEXPR PCleaningRecordSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCleaningRecordSummary(const PCleaningRecordSummary& from);
  PCleaningRecordSummary(PCleaningRecordSummary&& from) noexcept
    : PCleaningRecordSummary() {
    *this = ::std::move(from);
  }

  inline PCleaningRecordSummary& operator=(const PCleaningRecordSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCleaningRecordSummary& operator=(PCleaningRecordSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCleaningRecordSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCleaningRecordSummary* internal_default_instance() {
    return reinterpret_cast<const PCleaningRecordSummary*>(
               &_PCleaningRecordSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PCleaningRecordSummary& a, PCleaningRecordSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(PCleaningRecordSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCleaningRecordSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCleaningRecordSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCleaningRecordSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCleaningRecordSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PCleaningRecordSummary& from) {
    PCleaningRecordSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCleaningRecordSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZimaProto.OperationData.PCleaningRecordSummary";
  }
  protected:
  explicit PCleaningRecordSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kAreaSizeFieldNumber = 3,
    kOperationTypeFieldNumber = 4,
    kOperationResultFieldNumber = 5,
  };
  // uint32 start_time = 1;
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // uint32 duration = 2;
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // double area_size = 3;
  void clear_area_size();
  double area_size() const;
  void set_area_size(double value);
  private:
  double _internal_area_size() const;
  void _internal_set_area_size(double value);
  public:

  // .ZimaProto.OperationData.POperationType operation_type = 4;
  void clear_operation_type();
  ::ZimaProto::OperationData::POperationType operation_type() const;
  void set_operation_type(::ZimaProto::OperationData::POperationType value);
  private:
  ::ZimaProto::OperationData::POperationType _internal_operation_type() const;
  void _internal_set_operation_type(::ZimaProto::OperationData::POperationType value);
  public:

  // .ZimaProto.OperationData.POperationResult operation_result = 5;
  void clear_operation_result();
  ::ZimaProto::OperationData::POperationResult operation_result() const;
  void set_operation_result(::ZimaProto::OperationData::POperationResult value);
  private:
  ::ZimaProto::OperationData::POperationResult _internal_operation_result() const;
  void _internal_set_operation_result(::ZimaProto::OperationData::POperationResult value);
  public:

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.PCleaningRecordSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t start_time_;
    uint32_t duration_;
    double area_size_;
    int operation_type_;
    int operation_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zima_2fproto_2foperation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PCleaningRecordSummaryList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.PCleaningRecordSummaryList) */ {
 public:
  inline PCleaningRecordSummaryList() : PCleaningRecordSummaryList(nullptr) {}
  ~PCleaningRecordSummaryList() override;
  explicit PROTOBUF_CONSTEXPR PCleaningRecordSummaryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCleaningRecordSummaryList(const PCleaningRecordSummaryList& from);
  PCleaningRecordSummaryList(PCleaningRecordSummaryList&& from) noexcept
    : PCleaningRecordSummaryList() {
    *this = ::std::move(from);
  }

  inline PCleaningRecordSummaryList& operator=(const PCleaningRecordSummaryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCleaningRecordSummaryList& operator=(PCleaningRecordSummaryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCleaningRecordSummaryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCleaningRecordSummaryList* internal_default_instance() {
    return reinterpret_cast<const PCleaningRecordSummaryList*>(
               &_PCleaningRecordSummaryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PCleaningRecordSummaryList& a, PCleaningRecordSummaryList& b) {
    a.Swap(&b);
  }
  inline void Swap(PCleaningRecordSummaryList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCleaningRecordSummaryList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCleaningRecordSummaryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCleaningRecordSummaryList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCleaningRecordSummaryList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PCleaningRecordSummaryList& from) {
    PCleaningRecordSummaryList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCleaningRecordSummaryList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZimaProto.OperationData.PCleaningRecordSummaryList";
  }
  protected:
  explicit PCleaningRecordSummaryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordSummaryListFieldNumber = 1,
  };
  // repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
  int record_summary_list_size() const;
  private:
  int _internal_record_summary_list_size() const;
  public:
  void clear_record_summary_list();
  ::ZimaProto::OperationData::PCleaningRecordSummary* mutable_record_summary_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >*
      mutable_record_summary_list();
  private:
  const ::ZimaProto::OperationData::PCleaningRecordSummary& _internal_record_summary_list(int index) const;
  ::ZimaProto::OperationData::PCleaningRecordSummary* _internal_add_record_summary_list();
  public:
  const ::ZimaProto::OperationData::PCleaningRecordSummary& record_summary_list(int index) const;
  ::ZimaProto::OperationData::PCleaningRecordSummary* add_record_summary_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >&
      record_summary_list() const;

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.PCleaningRecordSummaryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary > record_summary_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zima_2fproto_2foperation_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PStepPoint

// .ZimaProto.Map.PMapPoint point = 1;
inline bool PStepPoint::_internal_has_point() const {
  return this != internal_default_instance() && _impl_.point_ != nullptr;
}
inline bool PStepPoint::has_point() const {
  return _internal_has_point();
}
inline const ::ZimaProto::Map::PMapPoint& PStepPoint::_internal_point() const {
  const ::ZimaProto::Map::PMapPoint* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZimaProto::Map::PMapPoint&>(
      ::ZimaProto::Map::_PMapPoint_default_instance_);
}
inline const ::ZimaProto::Map::PMapPoint& PStepPoint::point() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PStepPoint.point)
  return _internal_point();
}
inline void PStepPoint::unsafe_arena_set_allocated_point(
    ::ZimaProto::Map::PMapPoint* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZimaProto.OperationData.PStepPoint.point)
}
inline ::ZimaProto::Map::PMapPoint* PStepPoint::release_point() {
  
  ::ZimaProto::Map::PMapPoint* temp = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ZimaProto::Map::PMapPoint* PStepPoint::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:ZimaProto.OperationData.PStepPoint.point)
  
  ::ZimaProto::Map::PMapPoint* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::ZimaProto::Map::PMapPoint* PStepPoint::_internal_mutable_point() {
  
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZimaProto::Map::PMapPoint>(GetArenaForAllocation());
    _impl_.point_ = p;
  }
  return _impl_.point_;
}
inline ::ZimaProto::Map::PMapPoint* PStepPoint::mutable_point() {
  ::ZimaProto::Map::PMapPoint* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.PStepPoint.point)
  return _msg;
}
inline void PStepPoint::set_allocated_point(::ZimaProto::Map::PMapPoint* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point));
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.point_ = point;
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.OperationData.PStepPoint.point)
}

// .ZimaProto.OperationData.PStepPointType type = 2;
inline void PStepPoint::clear_type() {
  _impl_.type_ = 0;
}
inline ::ZimaProto::OperationData::PStepPointType PStepPoint::_internal_type() const {
  return static_cast< ::ZimaProto::OperationData::PStepPointType >(_impl_.type_);
}
inline ::ZimaProto::OperationData::PStepPointType PStepPoint::type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PStepPoint.type)
  return _internal_type();
}
inline void PStepPoint::_internal_set_type(::ZimaProto::OperationData::PStepPointType value) {
  
  _impl_.type_ = value;
}
inline void PStepPoint::set_type(::ZimaProto::OperationData::PStepPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PStepPoint.type)
}

// -------------------------------------------------------------------

// POperationData

// .ZimaProto.NavData.PNavData nav_data = 1;
inline bool POperationData::_internal_has_nav_data() const {
  return this != internal_default_instance() && _impl_.nav_data_ != nullptr;
}
inline bool POperationData::has_nav_data() const {
  return _internal_has_nav_data();
}
inline const ::ZimaProto::NavData::PNavData& POperationData::_internal_nav_data() const {
  const ::ZimaProto::NavData::PNavData* p = _impl_.nav_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZimaProto::NavData::PNavData&>(
      ::ZimaProto::NavData::_PNavData_default_instance_);
}
inline const ::ZimaProto::NavData::PNavData& POperationData::nav_data() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.nav_data)
  return _internal_nav_data();
}
inline void POperationData::unsafe_arena_set_allocated_nav_data(
    ::ZimaProto::NavData::PNavData* nav_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nav_data_);
  }
  _impl_.nav_data_ = nav_data;
  if (nav_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZimaProto.OperationData.POperationData.nav_data)
}
inline ::ZimaProto::NavData::PNavData* POperationData::release_nav_data() {
  
  ::ZimaProto::NavData::PNavData* temp = _impl_.nav_data_;
  _impl_.nav_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ZimaProto::NavData::PNavData* POperationData::unsafe_arena_release_nav_data() {
  // @@protoc_insertion_point(field_release:ZimaProto.OperationData.POperationData.nav_data)
  
  ::ZimaProto::NavData::PNavData* temp = _impl_.nav_data_;
  _impl_.nav_data_ = nullptr;
  return temp;
}
inline ::ZimaProto::NavData::PNavData* POperationData::_internal_mutable_nav_data() {
  
  if (_impl_.nav_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZimaProto::NavData::PNavData>(GetArenaForAllocation());
    _impl_.nav_data_ = p;
  }
  return _impl_.nav_data_;
}
inline ::ZimaProto::NavData::PNavData* POperationData::mutable_nav_data() {
  ::ZimaProto::NavData::PNavData* _msg = _internal_mutable_nav_data();
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.POperationData.nav_data)
  return _msg;
}
inline void POperationData::set_allocated_nav_data(::ZimaProto::NavData::PNavData* nav_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nav_data_);
  }
  if (nav_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nav_data));
    if (message_arena != submessage_arena) {
      nav_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nav_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nav_data_ = nav_data;
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.OperationData.POperationData.nav_data)
}

// double start_time = 2;
inline void POperationData::clear_start_time() {
  _impl_.start_time_ = 0;
}
inline double POperationData::_internal_start_time() const {
  return _impl_.start_time_;
}
inline double POperationData::start_time() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.start_time)
  return _internal_start_time();
}
inline void POperationData::_internal_set_start_time(double value) {
  
  _impl_.start_time_ = value;
}
inline void POperationData::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.start_time)
}

// repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
inline int POperationData::_internal_step_points_size() const {
  return _impl_.step_points_.size();
}
inline int POperationData::step_points_size() const {
  return _internal_step_points_size();
}
inline void POperationData::clear_step_points() {
  _impl_.step_points_.Clear();
}
inline ::ZimaProto::OperationData::PStepPoint* POperationData::mutable_step_points(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.POperationData.step_points)
  return _impl_.step_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >*
POperationData::mutable_step_points() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.OperationData.POperationData.step_points)
  return &_impl_.step_points_;
}
inline const ::ZimaProto::OperationData::PStepPoint& POperationData::_internal_step_points(int index) const {
  return _impl_.step_points_.Get(index);
}
inline const ::ZimaProto::OperationData::PStepPoint& POperationData::step_points(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.step_points)
  return _internal_step_points(index);
}
inline ::ZimaProto::OperationData::PStepPoint* POperationData::_internal_add_step_points() {
  return _impl_.step_points_.Add();
}
inline ::ZimaProto::OperationData::PStepPoint* POperationData::add_step_points() {
  ::ZimaProto::OperationData::PStepPoint* _add = _internal_add_step_points();
  // @@protoc_insertion_point(field_add:ZimaProto.OperationData.POperationData.step_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >&
POperationData::step_points() const {
  // @@protoc_insertion_point(field_list:ZimaProto.OperationData.POperationData.step_points)
  return _impl_.step_points_;
}

// .ZimaProto.Map.PMapPoint start_point = 4;
inline bool POperationData::_internal_has_start_point() const {
  return this != internal_default_instance() && _impl_.start_point_ != nullptr;
}
inline bool POperationData::has_start_point() const {
  return _internal_has_start_point();
}
inline const ::ZimaProto::Map::PMapPoint& POperationData::_internal_start_point() const {
  const ::ZimaProto::Map::PMapPoint* p = _impl_.start_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZimaProto::Map::PMapPoint&>(
      ::ZimaProto::Map::_PMapPoint_default_instance_);
}
inline const ::ZimaProto::Map::PMapPoint& POperationData::start_point() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.start_point)
  return _internal_start_point();
}
inline void POperationData::unsafe_arena_set_allocated_start_point(
    ::ZimaProto::Map::PMapPoint* start_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_point_);
  }
  _impl_.start_point_ = start_point;
  if (start_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZimaProto.OperationData.POperationData.start_point)
}
inline ::ZimaProto::Map::PMapPoint* POperationData::release_start_point() {
  
  ::ZimaProto::Map::PMapPoint* temp = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ZimaProto::Map::PMapPoint* POperationData::unsafe_arena_release_start_point() {
  // @@protoc_insertion_point(field_release:ZimaProto.OperationData.POperationData.start_point)
  
  ::ZimaProto::Map::PMapPoint* temp = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
  return temp;
}
inline ::ZimaProto::Map::PMapPoint* POperationData::_internal_mutable_start_point() {
  
  if (_impl_.start_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZimaProto::Map::PMapPoint>(GetArenaForAllocation());
    _impl_.start_point_ = p;
  }
  return _impl_.start_point_;
}
inline ::ZimaProto::Map::PMapPoint* POperationData::mutable_start_point() {
  ::ZimaProto::Map::PMapPoint* _msg = _internal_mutable_start_point();
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.POperationData.start_point)
  return _msg;
}
inline void POperationData::set_allocated_start_point(::ZimaProto::Map::PMapPoint* start_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_point_);
  }
  if (start_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_point));
    if (message_arena != submessage_arena) {
      start_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_point_ = start_point;
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.OperationData.POperationData.start_point)
}

// double duration = 5;
inline void POperationData::clear_duration() {
  _impl_.duration_ = 0;
}
inline double POperationData::_internal_duration() const {
  return _impl_.duration_;
}
inline double POperationData::duration() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.duration)
  return _internal_duration();
}
inline void POperationData::_internal_set_duration(double value) {
  
  _impl_.duration_ = value;
}
inline void POperationData::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.duration)
}

// .ZimaProto.OperationData.POperationType operation_type = 6;
inline void POperationData::clear_operation_type() {
  _impl_.operation_type_ = 0;
}
inline ::ZimaProto::OperationData::POperationType POperationData::_internal_operation_type() const {
  return static_cast< ::ZimaProto::OperationData::POperationType >(_impl_.operation_type_);
}
inline ::ZimaProto::OperationData::POperationType POperationData::operation_type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.operation_type)
  return _internal_operation_type();
}
inline void POperationData::_internal_set_operation_type(::ZimaProto::OperationData::POperationType value) {
  
  _impl_.operation_type_ = value;
}
inline void POperationData::set_operation_type(::ZimaProto::OperationData::POperationType value) {
  _internal_set_operation_type(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.operation_type)
}

// .ZimaProto.OperationData.POperationResult operation_result = 7;
inline void POperationData::clear_operation_result() {
  _impl_.operation_result_ = 0;
}
inline ::ZimaProto::OperationData::POperationResult POperationData::_internal_operation_result() const {
  return static_cast< ::ZimaProto::OperationData::POperationResult >(_impl_.operation_result_);
}
inline ::ZimaProto::OperationData::POperationResult POperationData::operation_result() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.operation_result)
  return _internal_operation_result();
}
inline void POperationData::_internal_set_operation_result(::ZimaProto::OperationData::POperationResult value) {
  
  _impl_.operation_result_ = value;
}
inline void POperationData::set_operation_result(::ZimaProto::OperationData::POperationResult value) {
  _internal_set_operation_result(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.operation_result)
}

// -------------------------------------------------------------------

// PCleaningRecordSummary

// uint32 start_time = 1;
inline void PCleaningRecordSummary::clear_start_time() {
  _impl_.start_time_ = 0u;
}
inline uint32_t PCleaningRecordSummary::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t PCleaningRecordSummary::start_time() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.start_time)
  return _internal_start_time();
}
inline void PCleaningRecordSummary::_internal_set_start_time(uint32_t value) {
  
  _impl_.start_time_ = value;
}
inline void PCleaningRecordSummary::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.start_time)
}

// uint32 duration = 2;
inline void PCleaningRecordSummary::clear_duration() {
  _impl_.duration_ = 0u;
}
inline uint32_t PCleaningRecordSummary::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t PCleaningRecordSummary::duration() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.duration)
  return _internal_duration();
}
inline void PCleaningRecordSummary::_internal_set_duration(uint32_t value) {
  
  _impl_.duration_ = value;
}
inline void PCleaningRecordSummary::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.duration)
}

// double area_size = 3;
inline void PCleaningRecordSummary::clear_area_size() {
  _impl_.area_size_ = 0;
}
inline double PCleaningRecordSummary::_internal_area_size() const {
  return _impl_.area_size_;
}
inline double PCleaningRecordSummary::area_size() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.area_size)
  return _internal_area_size();
}
inline void PCleaningRecordSummary::_internal_set_area_size(double value) {
  
  _impl_.area_size_ = value;
}
inline void PCleaningRecordSummary::set_area_size(double value) {
  _internal_set_area_size(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.area_size)
}

// .ZimaProto.OperationData.POperationType operation_type = 4;
inline void PCleaningRecordSummary::clear_operation_type() {
  _impl_.operation_type_ = 0;
}
inline ::ZimaProto::OperationData::POperationType PCleaningRecordSummary::_internal_operation_type() const {
  return static_cast< ::ZimaProto::OperationData::POperationType >(_impl_.operation_type_);
}
inline ::ZimaProto::OperationData::POperationType PCleaningRecordSummary::operation_type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.operation_type)
  return _internal_operation_type();
}
inline void PCleaningRecordSummary::_internal_set_operation_type(::ZimaProto::OperationData::POperationType value) {
  
  _impl_.operation_type_ = value;
}
inline void PCleaningRecordSummary::set_operation_type(::ZimaProto::OperationData::POperationType value) {
  _internal_set_operation_type(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.operation_type)
}

// .ZimaProto.OperationData.POperationResult operation_result = 5;
inline void PCleaningRecordSummary::clear_operation_result() {
  _impl_.operation_result_ = 0;
}
inline ::ZimaProto::OperationData::POperationResult PCleaningRecordSummary::_internal_operation_result() const {
  return static_cast< ::ZimaProto::OperationData::POperationResult >(_impl_.operation_result_);
}
inline ::ZimaProto::OperationData::POperationResult PCleaningRecordSummary::operation_result() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.operation_result)
  return _internal_operation_result();
}
inline void PCleaningRecordSummary::_internal_set_operation_result(::ZimaProto::OperationData::POperationResult value) {
  
  _impl_.operation_result_ = value;
}
inline void PCleaningRecordSummary::set_operation_result(::ZimaProto::OperationData::POperationResult value) {
  _internal_set_operation_result(value);
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.operation_result)
}

// -------------------------------------------------------------------

// PCleaningRecordSummaryList

// repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
inline int PCleaningRecordSummaryList::_internal_record_summary_list_size() const {
  return _impl_.record_summary_list_.size();
}
inline int PCleaningRecordSummaryList::record_summary_list_size() const {
  return _internal_record_summary_list_size();
}
inline void PCleaningRecordSummaryList::clear_record_summary_list() {
  _impl_.record_summary_list_.Clear();
}
inline ::ZimaProto::OperationData::PCleaningRecordSummary* PCleaningRecordSummaryList::mutable_record_summary_list(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return _impl_.record_summary_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >*
PCleaningRecordSummaryList::mutable_record_summary_list() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return &_impl_.record_summary_list_;
}
inline const ::ZimaProto::OperationData::PCleaningRecordSummary& PCleaningRecordSummaryList::_internal_record_summary_list(int index) const {
  return _impl_.record_summary_list_.Get(index);
}
inline const ::ZimaProto::OperationData::PCleaningRecordSummary& PCleaningRecordSummaryList::record_summary_list(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return _internal_record_summary_list(index);
}
inline ::ZimaProto::OperationData::PCleaningRecordSummary* PCleaningRecordSummaryList::_internal_add_record_summary_list() {
  return _impl_.record_summary_list_.Add();
}
inline ::ZimaProto::OperationData::PCleaningRecordSummary* PCleaningRecordSummaryList::add_record_summary_list() {
  ::ZimaProto::OperationData::PCleaningRecordSummary* _add = _internal_add_record_summary_list();
  // @@protoc_insertion_point(field_add:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >&
PCleaningRecordSummaryList::record_summary_list() const {
  // @@protoc_insertion_point(field_list:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return _impl_.record_summary_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OperationData
}  // namespace ZimaProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ZimaProto::OperationData::POperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::OperationData::POperationType>() {
  return ::ZimaProto::OperationData::POperationType_descriptor();
}
template <> struct is_proto_enum< ::ZimaProto::OperationData::POperationResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::OperationData::POperationResult>() {
  return ::ZimaProto::OperationData::POperationResult_descriptor();
}
template <> struct is_proto_enum< ::ZimaProto::OperationData::PStepPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::OperationData::PStepPointType>() {
  return ::ZimaProto::OperationData::PStepPointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zima_2fproto_2foperation_5fdata_2eproto
