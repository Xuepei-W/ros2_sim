// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/map.proto

#include "zima/proto/map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ZimaProto {
namespace Map {
PROTOBUF_CONSTEXPR PMapCell::PMapCell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PMapCellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMapCellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMapCellDefaultTypeInternal() {}
  union {
    PMapCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMapCellDefaultTypeInternal _PMapCell_default_instance_;
PROTOBUF_CONSTEXPR PMapCellBound::PMapCellBound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_min_)*/0
  , /*decltype(_impl_.x_max_)*/0
  , /*decltype(_impl_.y_min_)*/0
  , /*decltype(_impl_.y_max_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PMapCellBoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMapCellBoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMapCellBoundDefaultTypeInternal() {}
  union {
    PMapCellBound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMapCellBoundDefaultTypeInternal _PMapCellBound_default_instance_;
PROTOBUF_CONSTEXPR PMapPoint::PMapPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PMapPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMapPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMapPointDefaultTypeInternal() {}
  union {
    PMapPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMapPointDefaultTypeInternal _PMapPoint_default_instance_;
PROTOBUF_CONSTEXPR PMapPointBound::PMapPointBound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_min_)*/0
  , /*decltype(_impl_.x_max_)*/0
  , /*decltype(_impl_.y_min_)*/0
  , /*decltype(_impl_.y_max_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PMapPointBoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMapPointBoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMapPointBoundDefaultTypeInternal() {}
  union {
    PMapPointBound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMapPointBoundDefaultTypeInternal _PMapPointBound_default_instance_;
PROTOBUF_CONSTEXPR PDynamicMap2DInfo::PDynamicMap2DInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_min_y_max_cell_)*/nullptr
  , /*decltype(_impl_.resolution_)*/0
  , /*decltype(_impl_.x_range_)*/0
  , /*decltype(_impl_.y_range_)*/0
  , /*decltype(_impl_.x_reserve_range_)*/0
  , /*decltype(_impl_.y_reserve_range_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PDynamicMap2DInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PDynamicMap2DInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PDynamicMap2DInfoDefaultTypeInternal() {}
  union {
    PDynamicMap2DInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PDynamicMap2DInfoDefaultTypeInternal _PDynamicMap2DInfo_default_instance_;
PROTOBUF_CONSTEXPR PCharGridMap2D::PCharGridMap2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PCharGridMap2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCharGridMap2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCharGridMap2DDefaultTypeInternal() {}
  union {
    PCharGridMap2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCharGridMap2DDefaultTypeInternal _PCharGridMap2D_default_instance_;
PROTOBUF_CONSTEXPR PSlamValueGridMap2D::PSlamValueGridMap2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.map_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PSlamValueGridMap2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSlamValueGridMap2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSlamValueGridMap2DDefaultTypeInternal() {}
  union {
    PSlamValueGridMap2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSlamValueGridMap2DDefaultTypeInternal _PSlamValueGridMap2D_default_instance_;
PROTOBUF_CONSTEXPR PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PMultiLayerCharGridMap2D_MapDictEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMultiLayerCharGridMap2D_MapDictEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMultiLayerCharGridMap2D_MapDictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMultiLayerCharGridMap2D_MapDictEntry_DoNotUseDefaultTypeInternal _PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_dict_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PMultiLayerCharGridMap2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMultiLayerCharGridMap2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMultiLayerCharGridMap2DDefaultTypeInternal() {}
  union {
    PMultiLayerCharGridMap2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMultiLayerCharGridMap2DDefaultTypeInternal _PMultiLayerCharGridMap2D_default_instance_;
}  // namespace Map
}  // namespace ZimaProto
static ::_pb::Metadata file_level_metadata_zima_2fproto_2fmap_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zima_2fproto_2fmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zima_2fproto_2fmap_2eproto = nullptr;

const uint32_t TableStruct_zima_2fproto_2fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCell, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCell, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCellBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCellBound, _impl_.x_min_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCellBound, _impl_.x_max_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCellBound, _impl_.y_min_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapCellBound, _impl_.y_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPoint, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPoint, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPoint, _impl_.degree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPointBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPointBound, _impl_.x_min_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPointBound, _impl_.x_max_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPointBound, _impl_.y_min_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMapPointBound, _impl_.y_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.x_min_y_max_cell_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.x_range_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.y_range_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.x_reserve_range_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PDynamicMap2DInfo, _impl_.y_reserve_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PCharGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PCharGridMap2D, _impl_.map_info_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PCharGridMap2D, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PSlamValueGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PSlamValueGridMap2D, _impl_.map_info_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PSlamValueGridMap2D, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMultiLayerCharGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZimaProto::Map::PMultiLayerCharGridMap2D, _impl_.map_dict_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ZimaProto::Map::PMapCell)},
  { 8, -1, -1, sizeof(::ZimaProto::Map::PMapCellBound)},
  { 18, -1, -1, sizeof(::ZimaProto::Map::PMapPoint)},
  { 27, -1, -1, sizeof(::ZimaProto::Map::PMapPointBound)},
  { 37, -1, -1, sizeof(::ZimaProto::Map::PDynamicMap2DInfo)},
  { 50, -1, -1, sizeof(::ZimaProto::Map::PCharGridMap2D)},
  { 58, -1, -1, sizeof(::ZimaProto::Map::PSlamValueGridMap2D)},
  { 66, 74, -1, sizeof(::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse)},
  { 76, -1, -1, sizeof(::ZimaProto::Map::PMultiLayerCharGridMap2D)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ZimaProto::Map::_PMapCell_default_instance_._instance,
  &::ZimaProto::Map::_PMapCellBound_default_instance_._instance,
  &::ZimaProto::Map::_PMapPoint_default_instance_._instance,
  &::ZimaProto::Map::_PMapPointBound_default_instance_._instance,
  &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_._instance,
  &::ZimaProto::Map::_PCharGridMap2D_default_instance_._instance,
  &::ZimaProto::Map::_PSlamValueGridMap2D_default_instance_._instance,
  &::ZimaProto::Map::_PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse_default_instance_._instance,
  &::ZimaProto::Map::_PMultiLayerCharGridMap2D_default_instance_._instance,
};

const char descriptor_table_protodef_zima_2fproto_2fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024zima/proto/map.proto\022\rZimaProto.Map\" \n"
  "\010PMapCell\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"K\n\rPMapC"
  "ellBound\022\r\n\005x_min\030\001 \001(\005\022\r\n\005x_max\030\002 \001(\005\022\r"
  "\n\005y_min\030\003 \001(\005\022\r\n\005y_max\030\004 \001(\005\"1\n\tPMapPoin"
  "t\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\016\n\006degree\030\003 \001(\002\""
  "L\n\016PMapPointBound\022\r\n\005x_min\030\001 \001(\002\022\r\n\005x_ma"
  "x\030\002 \001(\002\022\r\n\005y_min\030\003 \001(\002\022\r\n\005y_max\030\004 \001(\002\"\274\001"
  "\n\021PDynamicMap2DInfo\022\014\n\004name\030\001 \001(\t\0221\n\020x_m"
  "in_y_max_cell\030\002 \001(\0132\027.ZimaProto.Map.PMap"
  "Cell\022\022\n\nresolution\030\003 \001(\002\022\017\n\007x_range\030\004 \001("
  "\005\022\017\n\007y_range\030\005 \001(\005\022\027\n\017x_reserve_range\030\006 "
  "\001(\005\022\027\n\017y_reserve_range\030\007 \001(\005\"R\n\016PCharGri"
  "dMap2D\0222\n\010map_info\030\001 \001(\0132 .ZimaProto.Map"
  ".PDynamicMap2DInfo\022\014\n\004data\030\002 \001(\t\"W\n\023PSla"
  "mValueGridMap2D\0222\n\010map_info\030\001 \001(\0132 .Zima"
  "Proto.Map.PDynamicMap2DInfo\022\014\n\004data\030\002 \003("
  "\005\"\261\001\n\030PMultiLayerCharGridMap2D\022F\n\010map_di"
  "ct\030\001 \003(\01324.ZimaProto.Map.PMultiLayerChar"
  "GridMap2D.MapDictEntry\032M\n\014MapDictEntry\022\013"
  "\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.ZimaProto.M"
  "ap.PCharGridMap2D:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_zima_2fproto_2fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zima_2fproto_2fmap_2eproto = {
    false, false, 829, descriptor_table_protodef_zima_2fproto_2fmap_2eproto,
    "zima/proto/map.proto",
    &descriptor_table_zima_2fproto_2fmap_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_zima_2fproto_2fmap_2eproto::offsets,
    file_level_metadata_zima_2fproto_2fmap_2eproto, file_level_enum_descriptors_zima_2fproto_2fmap_2eproto,
    file_level_service_descriptors_zima_2fproto_2fmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zima_2fproto_2fmap_2eproto_getter() {
  return &descriptor_table_zima_2fproto_2fmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zima_2fproto_2fmap_2eproto(&descriptor_table_zima_2fproto_2fmap_2eproto);
namespace ZimaProto {
namespace Map {

// ===================================================================

class PMapCell::_Internal {
 public:
};

PMapCell::PMapCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PMapCell)
}
PMapCell::PMapCell(const PMapCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMapCell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapCell)
}

inline void PMapCell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PMapCell::~PMapCell() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapCell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PMapCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PMapCell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMapCell::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMapCell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMapCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapCell)
  return target;
}

size_t PMapCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapCell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMapCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMapCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMapCell::GetClassData() const { return &_class_data_; }


void PMapCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMapCell*>(&to_msg);
  auto& from = static_cast<const PMapCell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapCell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMapCell::CopyFrom(const PMapCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapCell::IsInitialized() const {
  return true;
}

void PMapCell::InternalSwap(PMapCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMapCell, _impl_.y_)
      + sizeof(PMapCell::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PMapCell, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMapCell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[0]);
}

// ===================================================================

class PMapCellBound::_Internal {
 public:
};

PMapCellBound::PMapCellBound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PMapCellBound)
}
PMapCellBound::PMapCellBound(const PMapCellBound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMapCellBound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_min_){}
    , decltype(_impl_.x_max_){}
    , decltype(_impl_.y_min_){}
    , decltype(_impl_.y_max_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_min_, &from._impl_.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_max_) -
    reinterpret_cast<char*>(&_impl_.x_min_)) + sizeof(_impl_.y_max_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapCellBound)
}

inline void PMapCellBound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_min_){0}
    , decltype(_impl_.x_max_){0}
    , decltype(_impl_.y_min_){0}
    , decltype(_impl_.y_max_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PMapCellBound::~PMapCellBound() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapCellBound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PMapCellBound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PMapCellBound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMapCellBound::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapCellBound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_max_) -
      reinterpret_cast<char*>(&_impl_.x_min_)) + sizeof(_impl_.y_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMapCellBound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMapCellBound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapCellBound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_min = 1;
  if (this->_internal_x_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_min(), target);
  }

  // int32 x_max = 2;
  if (this->_internal_x_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_max(), target);
  }

  // int32 y_min = 3;
  if (this->_internal_y_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_min(), target);
  }

  // int32 y_max = 4;
  if (this->_internal_y_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapCellBound)
  return target;
}

size_t PMapCellBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapCellBound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x_min = 1;
  if (this->_internal_x_min() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_min());
  }

  // int32 x_max = 2;
  if (this->_internal_x_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_max());
  }

  // int32 y_min = 3;
  if (this->_internal_y_min() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_min());
  }

  // int32 y_max = 4;
  if (this->_internal_y_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMapCellBound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMapCellBound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMapCellBound::GetClassData() const { return &_class_data_; }


void PMapCellBound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMapCellBound*>(&to_msg);
  auto& from = static_cast<const PMapCellBound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapCellBound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x_min() != 0) {
    _this->_internal_set_x_min(from._internal_x_min());
  }
  if (from._internal_x_max() != 0) {
    _this->_internal_set_x_max(from._internal_x_max());
  }
  if (from._internal_y_min() != 0) {
    _this->_internal_set_y_min(from._internal_y_min());
  }
  if (from._internal_y_max() != 0) {
    _this->_internal_set_y_max(from._internal_y_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMapCellBound::CopyFrom(const PMapCellBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapCellBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapCellBound::IsInitialized() const {
  return true;
}

void PMapCellBound::InternalSwap(PMapCellBound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMapCellBound, _impl_.y_max_)
      + sizeof(PMapCellBound::_impl_.y_max_)
      - PROTOBUF_FIELD_OFFSET(PMapCellBound, _impl_.x_min_)>(
          reinterpret_cast<char*>(&_impl_.x_min_),
          reinterpret_cast<char*>(&other->_impl_.x_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMapCellBound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[1]);
}

// ===================================================================

class PMapPoint::_Internal {
 public:
};

PMapPoint::PMapPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PMapPoint)
}
PMapPoint::PMapPoint(const PMapPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMapPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.degree_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degree_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.degree_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapPoint)
}

inline void PMapPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.degree_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PMapPoint::~PMapPoint() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PMapPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PMapPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.degree_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.degree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMapPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMapPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float degree = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_degree = this->_internal_degree();
  uint32_t raw_degree;
  memcpy(&raw_degree, &tmp_degree, sizeof(tmp_degree));
  if (raw_degree != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_degree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapPoint)
  return target;
}

size_t PMapPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float degree = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_degree = this->_internal_degree();
  uint32_t raw_degree;
  memcpy(&raw_degree, &tmp_degree, sizeof(tmp_degree));
  if (raw_degree != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMapPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMapPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMapPoint::GetClassData() const { return &_class_data_; }


void PMapPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMapPoint*>(&to_msg);
  auto& from = static_cast<const PMapPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_degree = from._internal_degree();
  uint32_t raw_degree;
  memcpy(&raw_degree, &tmp_degree, sizeof(tmp_degree));
  if (raw_degree != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMapPoint::CopyFrom(const PMapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapPoint::IsInitialized() const {
  return true;
}

void PMapPoint::InternalSwap(PMapPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMapPoint, _impl_.degree_)
      + sizeof(PMapPoint::_impl_.degree_)
      - PROTOBUF_FIELD_OFFSET(PMapPoint, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMapPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[2]);
}

// ===================================================================

class PMapPointBound::_Internal {
 public:
};

PMapPointBound::PMapPointBound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PMapPointBound)
}
PMapPointBound::PMapPointBound(const PMapPointBound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMapPointBound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_min_){}
    , decltype(_impl_.x_max_){}
    , decltype(_impl_.y_min_){}
    , decltype(_impl_.y_max_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_min_, &from._impl_.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_max_) -
    reinterpret_cast<char*>(&_impl_.x_min_)) + sizeof(_impl_.y_max_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapPointBound)
}

inline void PMapPointBound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_min_){0}
    , decltype(_impl_.x_max_){0}
    , decltype(_impl_.y_min_){0}
    , decltype(_impl_.y_max_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PMapPointBound::~PMapPointBound() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapPointBound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PMapPointBound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PMapPointBound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMapPointBound::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapPointBound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_max_) -
      reinterpret_cast<char*>(&_impl_.x_min_)) + sizeof(_impl_.y_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMapPointBound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMapPointBound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapPointBound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_min = this->_internal_x_min();
  uint32_t raw_x_min;
  memcpy(&raw_x_min, &tmp_x_min, sizeof(tmp_x_min));
  if (raw_x_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x_min(), target);
  }

  // float x_max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_max = this->_internal_x_max();
  uint32_t raw_x_max;
  memcpy(&raw_x_max, &tmp_x_max, sizeof(tmp_x_max));
  if (raw_x_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x_max(), target);
  }

  // float y_min = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_min = this->_internal_y_min();
  uint32_t raw_y_min;
  memcpy(&raw_y_min, &tmp_y_min, sizeof(tmp_y_min));
  if (raw_y_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y_min(), target);
  }

  // float y_max = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_max = this->_internal_y_max();
  uint32_t raw_y_max;
  memcpy(&raw_y_max, &tmp_y_max, sizeof(tmp_y_max));
  if (raw_y_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapPointBound)
  return target;
}

size_t PMapPointBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapPointBound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_min = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_min = this->_internal_x_min();
  uint32_t raw_x_min;
  memcpy(&raw_x_min, &tmp_x_min, sizeof(tmp_x_min));
  if (raw_x_min != 0) {
    total_size += 1 + 4;
  }

  // float x_max = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_max = this->_internal_x_max();
  uint32_t raw_x_max;
  memcpy(&raw_x_max, &tmp_x_max, sizeof(tmp_x_max));
  if (raw_x_max != 0) {
    total_size += 1 + 4;
  }

  // float y_min = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_min = this->_internal_y_min();
  uint32_t raw_y_min;
  memcpy(&raw_y_min, &tmp_y_min, sizeof(tmp_y_min));
  if (raw_y_min != 0) {
    total_size += 1 + 4;
  }

  // float y_max = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_max = this->_internal_y_max();
  uint32_t raw_y_max;
  memcpy(&raw_y_max, &tmp_y_max, sizeof(tmp_y_max));
  if (raw_y_max != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMapPointBound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMapPointBound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMapPointBound::GetClassData() const { return &_class_data_; }


void PMapPointBound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMapPointBound*>(&to_msg);
  auto& from = static_cast<const PMapPointBound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapPointBound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_min = from._internal_x_min();
  uint32_t raw_x_min;
  memcpy(&raw_x_min, &tmp_x_min, sizeof(tmp_x_min));
  if (raw_x_min != 0) {
    _this->_internal_set_x_min(from._internal_x_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_max = from._internal_x_max();
  uint32_t raw_x_max;
  memcpy(&raw_x_max, &tmp_x_max, sizeof(tmp_x_max));
  if (raw_x_max != 0) {
    _this->_internal_set_x_max(from._internal_x_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_min = from._internal_y_min();
  uint32_t raw_y_min;
  memcpy(&raw_y_min, &tmp_y_min, sizeof(tmp_y_min));
  if (raw_y_min != 0) {
    _this->_internal_set_y_min(from._internal_y_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_max = from._internal_y_max();
  uint32_t raw_y_max;
  memcpy(&raw_y_max, &tmp_y_max, sizeof(tmp_y_max));
  if (raw_y_max != 0) {
    _this->_internal_set_y_max(from._internal_y_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMapPointBound::CopyFrom(const PMapPointBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapPointBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapPointBound::IsInitialized() const {
  return true;
}

void PMapPointBound::InternalSwap(PMapPointBound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMapPointBound, _impl_.y_max_)
      + sizeof(PMapPointBound::_impl_.y_max_)
      - PROTOBUF_FIELD_OFFSET(PMapPointBound, _impl_.x_min_)>(
          reinterpret_cast<char*>(&_impl_.x_min_),
          reinterpret_cast<char*>(&other->_impl_.x_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMapPointBound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[3]);
}

// ===================================================================

class PDynamicMap2DInfo::_Internal {
 public:
  static const ::ZimaProto::Map::PMapCell& x_min_y_max_cell(const PDynamicMap2DInfo* msg);
};

const ::ZimaProto::Map::PMapCell&
PDynamicMap2DInfo::_Internal::x_min_y_max_cell(const PDynamicMap2DInfo* msg) {
  return *msg->_impl_.x_min_y_max_cell_;
}
PDynamicMap2DInfo::PDynamicMap2DInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PDynamicMap2DInfo)
}
PDynamicMap2DInfo::PDynamicMap2DInfo(const PDynamicMap2DInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PDynamicMap2DInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.x_min_y_max_cell_){nullptr}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.x_range_){}
    , decltype(_impl_.y_range_){}
    , decltype(_impl_.x_reserve_range_){}
    , decltype(_impl_.y_reserve_range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_x_min_y_max_cell()) {
    _this->_impl_.x_min_y_max_cell_ = new ::ZimaProto::Map::PMapCell(*from._impl_.x_min_y_max_cell_);
  }
  ::memcpy(&_impl_.resolution_, &from._impl_.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_reserve_range_) -
    reinterpret_cast<char*>(&_impl_.resolution_)) + sizeof(_impl_.y_reserve_range_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PDynamicMap2DInfo)
}

inline void PDynamicMap2DInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.x_min_y_max_cell_){nullptr}
    , decltype(_impl_.resolution_){0}
    , decltype(_impl_.x_range_){0}
    , decltype(_impl_.y_range_){0}
    , decltype(_impl_.x_reserve_range_){0}
    , decltype(_impl_.y_reserve_range_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PDynamicMap2DInfo::~PDynamicMap2DInfo() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PDynamicMap2DInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PDynamicMap2DInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.x_min_y_max_cell_;
}

void PDynamicMap2DInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PDynamicMap2DInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PDynamicMap2DInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.x_min_y_max_cell_ != nullptr) {
    delete _impl_.x_min_y_max_cell_;
  }
  _impl_.x_min_y_max_cell_ = nullptr;
  ::memset(&_impl_.resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_reserve_range_) -
      reinterpret_cast<char*>(&_impl_.resolution_)) + sizeof(_impl_.y_reserve_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDynamicMap2DInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ZimaProto.Map.PDynamicMap2DInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_min_y_max_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 x_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x_reserve_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.x_reserve_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_reserve_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.y_reserve_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PDynamicMap2DInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PDynamicMap2DInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.Map.PDynamicMap2DInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
  if (this->_internal_has_x_min_y_max_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::x_min_y_max_cell(this),
        _Internal::x_min_y_max_cell(this).GetCachedSize(), target, stream);
  }

  // float resolution = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_resolution(), target);
  }

  // int32 x_range = 4;
  if (this->_internal_x_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x_range(), target);
  }

  // int32 y_range = 5;
  if (this->_internal_y_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y_range(), target);
  }

  // int32 x_reserve_range = 6;
  if (this->_internal_x_reserve_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_x_reserve_range(), target);
  }

  // int32 y_reserve_range = 7;
  if (this->_internal_y_reserve_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_y_reserve_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PDynamicMap2DInfo)
  return target;
}

size_t PDynamicMap2DInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PDynamicMap2DInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
  if (this->_internal_has_x_min_y_max_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.x_min_y_max_cell_);
  }

  // float resolution = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 4;
  }

  // int32 x_range = 4;
  if (this->_internal_x_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_range());
  }

  // int32 y_range = 5;
  if (this->_internal_y_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_range());
  }

  // int32 x_reserve_range = 6;
  if (this->_internal_x_reserve_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_reserve_range());
  }

  // int32 y_reserve_range = 7;
  if (this->_internal_y_reserve_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_reserve_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PDynamicMap2DInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PDynamicMap2DInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PDynamicMap2DInfo::GetClassData() const { return &_class_data_; }


void PDynamicMap2DInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PDynamicMap2DInfo*>(&to_msg);
  auto& from = static_cast<const PDynamicMap2DInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PDynamicMap2DInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_x_min_y_max_cell()) {
    _this->_internal_mutable_x_min_y_max_cell()->::ZimaProto::Map::PMapCell::MergeFrom(
        from._internal_x_min_y_max_cell());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = from._internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  if (from._internal_x_range() != 0) {
    _this->_internal_set_x_range(from._internal_x_range());
  }
  if (from._internal_y_range() != 0) {
    _this->_internal_set_y_range(from._internal_y_range());
  }
  if (from._internal_x_reserve_range() != 0) {
    _this->_internal_set_x_reserve_range(from._internal_x_reserve_range());
  }
  if (from._internal_y_reserve_range() != 0) {
    _this->_internal_set_y_reserve_range(from._internal_y_reserve_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PDynamicMap2DInfo::CopyFrom(const PDynamicMap2DInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PDynamicMap2DInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDynamicMap2DInfo::IsInitialized() const {
  return true;
}

void PDynamicMap2DInfo::InternalSwap(PDynamicMap2DInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDynamicMap2DInfo, _impl_.y_reserve_range_)
      + sizeof(PDynamicMap2DInfo::_impl_.y_reserve_range_)
      - PROTOBUF_FIELD_OFFSET(PDynamicMap2DInfo, _impl_.x_min_y_max_cell_)>(
          reinterpret_cast<char*>(&_impl_.x_min_y_max_cell_),
          reinterpret_cast<char*>(&other->_impl_.x_min_y_max_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDynamicMap2DInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[4]);
}

// ===================================================================

class PCharGridMap2D::_Internal {
 public:
  static const ::ZimaProto::Map::PDynamicMap2DInfo& map_info(const PCharGridMap2D* msg);
};

const ::ZimaProto::Map::PDynamicMap2DInfo&
PCharGridMap2D::_Internal::map_info(const PCharGridMap2D* msg) {
  return *msg->_impl_.map_info_;
}
PCharGridMap2D::PCharGridMap2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PCharGridMap2D)
}
PCharGridMap2D::PCharGridMap2D(const PCharGridMap2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PCharGridMap2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.map_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_map_info()) {
    _this->_impl_.map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo(*from._impl_.map_info_);
  }
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PCharGridMap2D)
}

inline void PCharGridMap2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.map_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PCharGridMap2D::~PCharGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PCharGridMap2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCharGridMap2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.map_info_;
}

void PCharGridMap2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PCharGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PCharGridMap2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.map_info_ != nullptr) {
    delete _impl_.map_info_;
  }
  _impl_.map_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCharGridMap2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ZimaProto.Map.PCharGridMap2D.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCharGridMap2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PCharGridMap2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->_internal_has_map_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map_info(this),
        _Internal::map_info(this).GetCachedSize(), target, stream);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.Map.PCharGridMap2D.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PCharGridMap2D)
  return target;
}

size_t PCharGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PCharGridMap2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->_internal_has_map_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCharGridMap2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PCharGridMap2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCharGridMap2D::GetClassData() const { return &_class_data_; }


void PCharGridMap2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PCharGridMap2D*>(&to_msg);
  auto& from = static_cast<const PCharGridMap2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PCharGridMap2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_map_info()) {
    _this->_internal_mutable_map_info()->::ZimaProto::Map::PDynamicMap2DInfo::MergeFrom(
        from._internal_map_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCharGridMap2D::CopyFrom(const PCharGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PCharGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCharGridMap2D::IsInitialized() const {
  return true;
}

void PCharGridMap2D::InternalSwap(PCharGridMap2D* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.map_info_, other->_impl_.map_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PCharGridMap2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[5]);
}

// ===================================================================

class PSlamValueGridMap2D::_Internal {
 public:
  static const ::ZimaProto::Map::PDynamicMap2DInfo& map_info(const PSlamValueGridMap2D* msg);
};

const ::ZimaProto::Map::PDynamicMap2DInfo&
PSlamValueGridMap2D::_Internal::map_info(const PSlamValueGridMap2D* msg) {
  return *msg->_impl_.map_info_;
}
PSlamValueGridMap2D::PSlamValueGridMap2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PSlamValueGridMap2D)
}
PSlamValueGridMap2D::PSlamValueGridMap2D(const PSlamValueGridMap2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PSlamValueGridMap2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.map_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_info()) {
    _this->_impl_.map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo(*from._impl_.map_info_);
  }
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PSlamValueGridMap2D)
}

inline void PSlamValueGridMap2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.map_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PSlamValueGridMap2D::~PSlamValueGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PSlamValueGridMap2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSlamValueGridMap2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.map_info_;
}

void PSlamValueGridMap2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSlamValueGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PSlamValueGridMap2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.map_info_ != nullptr) {
    delete _impl_.map_info_;
  }
  _impl_.map_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSlamValueGridMap2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PSlamValueGridMap2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PSlamValueGridMap2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->_internal_has_map_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map_info(this),
        _Internal::map_info(this).GetCachedSize(), target, stream);
  }

  // repeated int32 data = 2;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PSlamValueGridMap2D)
  return target;
}

size_t PSlamValueGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PSlamValueGridMap2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->_internal_has_map_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSlamValueGridMap2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSlamValueGridMap2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSlamValueGridMap2D::GetClassData() const { return &_class_data_; }


void PSlamValueGridMap2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSlamValueGridMap2D*>(&to_msg);
  auto& from = static_cast<const PSlamValueGridMap2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PSlamValueGridMap2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_has_map_info()) {
    _this->_internal_mutable_map_info()->::ZimaProto::Map::PDynamicMap2DInfo::MergeFrom(
        from._internal_map_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSlamValueGridMap2D::CopyFrom(const PSlamValueGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PSlamValueGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSlamValueGridMap2D::IsInitialized() const {
  return true;
}

void PSlamValueGridMap2D::InternalSwap(PSlamValueGridMap2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.map_info_, other->_impl_.map_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSlamValueGridMap2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[6]);
}

// ===================================================================

PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse() {}
PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::MergeFrom(const PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[7]);
}

// ===================================================================

class PMultiLayerCharGridMap2D::_Internal {
 public:
};

PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PMultiLayerCharGridMap2D::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ZimaProto.Map.PMultiLayerCharGridMap2D)
}
PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D(const PMultiLayerCharGridMap2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMultiLayerCharGridMap2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.map_dict_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.map_dict_.MergeFrom(from._impl_.map_dict_);
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMultiLayerCharGridMap2D)
}

inline void PMultiLayerCharGridMap2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.map_dict_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PMultiLayerCharGridMap2D::~PMultiLayerCharGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMultiLayerCharGridMap2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PMultiLayerCharGridMap2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_dict_.Destruct();
  _impl_.map_dict_.~MapField();
}

void PMultiLayerCharGridMap2D::ArenaDtor(void* object) {
  PMultiLayerCharGridMap2D* _this = reinterpret_cast< PMultiLayerCharGridMap2D* >(object);
  _this->_impl_.map_dict_.Destruct();
}
void PMultiLayerCharGridMap2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMultiLayerCharGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_dict_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMultiLayerCharGridMap2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.map_dict_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMultiLayerCharGridMap2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
  if (!this->_internal_map_dict().empty()) {
    using MapType = ::_pb::Map<std::string, ::ZimaProto::Map::PCharGridMap2D>;
    using WireHelper = PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_dict();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ZimaProto.Map.PMultiLayerCharGridMap2D.MapDictEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMultiLayerCharGridMap2D)
  return target;
}

size_t PMultiLayerCharGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_dict_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ZimaProto::Map::PCharGridMap2D >::const_iterator
      it = this->_internal_map_dict().begin();
      it != this->_internal_map_dict().end(); ++it) {
    total_size += PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMultiLayerCharGridMap2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMultiLayerCharGridMap2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMultiLayerCharGridMap2D::GetClassData() const { return &_class_data_; }


void PMultiLayerCharGridMap2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMultiLayerCharGridMap2D*>(&to_msg);
  auto& from = static_cast<const PMultiLayerCharGridMap2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_dict_.MergeFrom(from._impl_.map_dict_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMultiLayerCharGridMap2D::CopyFrom(const PMultiLayerCharGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMultiLayerCharGridMap2D::IsInitialized() const {
  return true;
}

void PMultiLayerCharGridMap2D::InternalSwap(PMultiLayerCharGridMap2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_dict_.InternalSwap(&other->_impl_.map_dict_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PMultiLayerCharGridMap2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zima_2fproto_2fmap_2eproto_getter, &descriptor_table_zima_2fproto_2fmap_2eproto_once,
      file_level_metadata_zima_2fproto_2fmap_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Map
}  // namespace ZimaProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PMapCell*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PMapCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PMapCell >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PMapCellBound*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PMapCellBound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PMapCellBound >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PMapPoint*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PMapPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PMapPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PMapPointBound*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PMapPointBound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PMapPointBound >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PDynamicMap2DInfo*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PDynamicMap2DInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PDynamicMap2DInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PCharGridMap2D*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PCharGridMap2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PCharGridMap2D >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PSlamValueGridMap2D*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PSlamValueGridMap2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PSlamValueGridMap2D >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PMultiLayerCharGridMap2D_MapDictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ZimaProto::Map::PMultiLayerCharGridMap2D*
Arena::CreateMaybeMessage< ::ZimaProto::Map::PMultiLayerCharGridMap2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZimaProto::Map::PMultiLayerCharGridMap2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
