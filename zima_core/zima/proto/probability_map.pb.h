// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/probability_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zima_2fproto_2fprobability_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zima_2fproto_2fprobability_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zima/proto/map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zima_2fproto_2fprobability_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zima_2fproto_2fprobability_5fmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zima_2fproto_2fprobability_5fmap_2eproto;
namespace ZimaProto {
namespace ProbabilityMap {
class PProbabilityIndexGridMap2D;
struct PProbabilityIndexGridMap2DDefaultTypeInternal;
extern PProbabilityIndexGridMap2DDefaultTypeInternal _PProbabilityIndexGridMap2D_default_instance_;
}  // namespace ProbabilityMap
}  // namespace ZimaProto
PROTOBUF_NAMESPACE_OPEN
template<> ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* Arena::CreateMaybeMessage<::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZimaProto {
namespace ProbabilityMap {

// ===================================================================

class PProbabilityIndexGridMap2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D) */ {
 public:
  inline PProbabilityIndexGridMap2D() : PProbabilityIndexGridMap2D(nullptr) {}
  ~PProbabilityIndexGridMap2D() override;
  explicit PROTOBUF_CONSTEXPR PProbabilityIndexGridMap2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PProbabilityIndexGridMap2D(const PProbabilityIndexGridMap2D& from);
  PProbabilityIndexGridMap2D(PProbabilityIndexGridMap2D&& from) noexcept
    : PProbabilityIndexGridMap2D() {
    *this = ::std::move(from);
  }

  inline PProbabilityIndexGridMap2D& operator=(const PProbabilityIndexGridMap2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PProbabilityIndexGridMap2D& operator=(PProbabilityIndexGridMap2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PProbabilityIndexGridMap2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const PProbabilityIndexGridMap2D* internal_default_instance() {
    return reinterpret_cast<const PProbabilityIndexGridMap2D*>(
               &_PProbabilityIndexGridMap2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PProbabilityIndexGridMap2D& a, PProbabilityIndexGridMap2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PProbabilityIndexGridMap2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PProbabilityIndexGridMap2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PProbabilityIndexGridMap2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PProbabilityIndexGridMap2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PProbabilityIndexGridMap2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PProbabilityIndexGridMap2D& from) {
    PProbabilityIndexGridMap2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PProbabilityIndexGridMap2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D";
  }
  protected:
  explicit PProbabilityIndexGridMap2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kMapInfoFieldNumber = 1,
    kHitProbabilityOnObstacleFieldNumber = 2,
    kMissProbabilityOnObstacleFieldNumber = 3,
    kMaxProbabilityForObstacleInCellFieldNumber = 4,
    kMinProbabilityForObstacleInCellFieldNumber = 5,
    kProbabilityCountFieldNumber = 6,
  };
  // repeated uint32 data = 7;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data() const;
  void _internal_add_data(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data();
  public:
  uint32_t data(int index) const;
  void set_data(int index, uint32_t value);
  void add_data(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data();

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  bool has_map_info() const;
  private:
  bool _internal_has_map_info() const;
  public:
  void clear_map_info();
  const ::ZimaProto::Map::PDynamicMap2DInfo& map_info() const;
  PROTOBUF_NODISCARD ::ZimaProto::Map::PDynamicMap2DInfo* release_map_info();
  ::ZimaProto::Map::PDynamicMap2DInfo* mutable_map_info();
  void set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info);
  private:
  const ::ZimaProto::Map::PDynamicMap2DInfo& _internal_map_info() const;
  ::ZimaProto::Map::PDynamicMap2DInfo* _internal_mutable_map_info();
  public:
  void unsafe_arena_set_allocated_map_info(
      ::ZimaProto::Map::PDynamicMap2DInfo* map_info);
  ::ZimaProto::Map::PDynamicMap2DInfo* unsafe_arena_release_map_info();

  // float hit_probability_on_obstacle = 2;
  void clear_hit_probability_on_obstacle();
  float hit_probability_on_obstacle() const;
  void set_hit_probability_on_obstacle(float value);
  private:
  float _internal_hit_probability_on_obstacle() const;
  void _internal_set_hit_probability_on_obstacle(float value);
  public:

  // float miss_probability_on_obstacle = 3;
  void clear_miss_probability_on_obstacle();
  float miss_probability_on_obstacle() const;
  void set_miss_probability_on_obstacle(float value);
  private:
  float _internal_miss_probability_on_obstacle() const;
  void _internal_set_miss_probability_on_obstacle(float value);
  public:

  // float max_probability_for_obstacle_in_cell = 4;
  void clear_max_probability_for_obstacle_in_cell();
  float max_probability_for_obstacle_in_cell() const;
  void set_max_probability_for_obstacle_in_cell(float value);
  private:
  float _internal_max_probability_for_obstacle_in_cell() const;
  void _internal_set_max_probability_for_obstacle_in_cell(float value);
  public:

  // float min_probability_for_obstacle_in_cell = 5;
  void clear_min_probability_for_obstacle_in_cell();
  float min_probability_for_obstacle_in_cell() const;
  void set_min_probability_for_obstacle_in_cell(float value);
  private:
  float _internal_min_probability_for_obstacle_in_cell() const;
  void _internal_set_min_probability_for_obstacle_in_cell(float value);
  public:

  // uint32 probability_count = 6;
  void clear_probability_count();
  uint32_t probability_count() const;
  void set_probability_count(uint32_t value);
  private:
  uint32_t _internal_probability_count() const;
  void _internal_set_probability_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    ::ZimaProto::Map::PDynamicMap2DInfo* map_info_;
    float hit_probability_on_obstacle_;
    float miss_probability_on_obstacle_;
    float max_probability_for_obstacle_in_cell_;
    float min_probability_for_obstacle_in_cell_;
    uint32_t probability_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zima_2fproto_2fprobability_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PProbabilityIndexGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
inline bool PProbabilityIndexGridMap2D::_internal_has_map_info() const {
  return this != internal_default_instance() && _impl_.map_info_ != nullptr;
}
inline bool PProbabilityIndexGridMap2D::has_map_info() const {
  return _internal_has_map_info();
}
inline const ::ZimaProto::Map::PDynamicMap2DInfo& PProbabilityIndexGridMap2D::_internal_map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = _impl_.map_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo&>(
      ::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
inline const ::ZimaProto::Map::PDynamicMap2DInfo& PProbabilityIndexGridMap2D::map_info() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  return _internal_map_info();
}
inline void PProbabilityIndexGridMap2D::unsafe_arena_set_allocated_map_info(
    ::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_info_);
  }
  _impl_.map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::release_map_info() {
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = _impl_.map_info_;
  _impl_.map_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::unsafe_arena_release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = _impl_.map_info_;
  _impl_.map_info_ = nullptr;
  return temp;
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::_internal_mutable_map_info() {
  
  if (_impl_.map_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZimaProto::Map::PDynamicMap2DInfo>(GetArenaForAllocation());
    _impl_.map_info_ = p;
  }
  return _impl_.map_info_;
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::mutable_map_info() {
  ::ZimaProto::Map::PDynamicMap2DInfo* _msg = _internal_mutable_map_info();
  // @@protoc_insertion_point(field_mutable:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  return _msg;
}
inline void PProbabilityIndexGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_info_);
  }
  if (map_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_info));
    if (message_arena != submessage_arena) {
      map_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_info_ = map_info;
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
}

// float hit_probability_on_obstacle = 2;
inline void PProbabilityIndexGridMap2D::clear_hit_probability_on_obstacle() {
  _impl_.hit_probability_on_obstacle_ = 0;
}
inline float PProbabilityIndexGridMap2D::_internal_hit_probability_on_obstacle() const {
  return _impl_.hit_probability_on_obstacle_;
}
inline float PProbabilityIndexGridMap2D::hit_probability_on_obstacle() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.hit_probability_on_obstacle)
  return _internal_hit_probability_on_obstacle();
}
inline void PProbabilityIndexGridMap2D::_internal_set_hit_probability_on_obstacle(float value) {
  
  _impl_.hit_probability_on_obstacle_ = value;
}
inline void PProbabilityIndexGridMap2D::set_hit_probability_on_obstacle(float value) {
  _internal_set_hit_probability_on_obstacle(value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.hit_probability_on_obstacle)
}

// float miss_probability_on_obstacle = 3;
inline void PProbabilityIndexGridMap2D::clear_miss_probability_on_obstacle() {
  _impl_.miss_probability_on_obstacle_ = 0;
}
inline float PProbabilityIndexGridMap2D::_internal_miss_probability_on_obstacle() const {
  return _impl_.miss_probability_on_obstacle_;
}
inline float PProbabilityIndexGridMap2D::miss_probability_on_obstacle() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.miss_probability_on_obstacle)
  return _internal_miss_probability_on_obstacle();
}
inline void PProbabilityIndexGridMap2D::_internal_set_miss_probability_on_obstacle(float value) {
  
  _impl_.miss_probability_on_obstacle_ = value;
}
inline void PProbabilityIndexGridMap2D::set_miss_probability_on_obstacle(float value) {
  _internal_set_miss_probability_on_obstacle(value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.miss_probability_on_obstacle)
}

// float max_probability_for_obstacle_in_cell = 4;
inline void PProbabilityIndexGridMap2D::clear_max_probability_for_obstacle_in_cell() {
  _impl_.max_probability_for_obstacle_in_cell_ = 0;
}
inline float PProbabilityIndexGridMap2D::_internal_max_probability_for_obstacle_in_cell() const {
  return _impl_.max_probability_for_obstacle_in_cell_;
}
inline float PProbabilityIndexGridMap2D::max_probability_for_obstacle_in_cell() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.max_probability_for_obstacle_in_cell)
  return _internal_max_probability_for_obstacle_in_cell();
}
inline void PProbabilityIndexGridMap2D::_internal_set_max_probability_for_obstacle_in_cell(float value) {
  
  _impl_.max_probability_for_obstacle_in_cell_ = value;
}
inline void PProbabilityIndexGridMap2D::set_max_probability_for_obstacle_in_cell(float value) {
  _internal_set_max_probability_for_obstacle_in_cell(value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.max_probability_for_obstacle_in_cell)
}

// float min_probability_for_obstacle_in_cell = 5;
inline void PProbabilityIndexGridMap2D::clear_min_probability_for_obstacle_in_cell() {
  _impl_.min_probability_for_obstacle_in_cell_ = 0;
}
inline float PProbabilityIndexGridMap2D::_internal_min_probability_for_obstacle_in_cell() const {
  return _impl_.min_probability_for_obstacle_in_cell_;
}
inline float PProbabilityIndexGridMap2D::min_probability_for_obstacle_in_cell() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.min_probability_for_obstacle_in_cell)
  return _internal_min_probability_for_obstacle_in_cell();
}
inline void PProbabilityIndexGridMap2D::_internal_set_min_probability_for_obstacle_in_cell(float value) {
  
  _impl_.min_probability_for_obstacle_in_cell_ = value;
}
inline void PProbabilityIndexGridMap2D::set_min_probability_for_obstacle_in_cell(float value) {
  _internal_set_min_probability_for_obstacle_in_cell(value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.min_probability_for_obstacle_in_cell)
}

// uint32 probability_count = 6;
inline void PProbabilityIndexGridMap2D::clear_probability_count() {
  _impl_.probability_count_ = 0u;
}
inline uint32_t PProbabilityIndexGridMap2D::_internal_probability_count() const {
  return _impl_.probability_count_;
}
inline uint32_t PProbabilityIndexGridMap2D::probability_count() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.probability_count)
  return _internal_probability_count();
}
inline void PProbabilityIndexGridMap2D::_internal_set_probability_count(uint32_t value) {
  
  _impl_.probability_count_ = value;
}
inline void PProbabilityIndexGridMap2D::set_probability_count(uint32_t value) {
  _internal_set_probability_count(value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.probability_count)
}

// repeated uint32 data = 7;
inline int PProbabilityIndexGridMap2D::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int PProbabilityIndexGridMap2D::data_size() const {
  return _internal_data_size();
}
inline void PProbabilityIndexGridMap2D::clear_data() {
  _impl_.data_.Clear();
}
inline uint32_t PProbabilityIndexGridMap2D::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline uint32_t PProbabilityIndexGridMap2D::data(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return _internal_data(index);
}
inline void PProbabilityIndexGridMap2D::set_data(int index, uint32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
}
inline void PProbabilityIndexGridMap2D::_internal_add_data(uint32_t value) {
  _impl_.data_.Add(value);
}
inline void PProbabilityIndexGridMap2D::add_data(uint32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PProbabilityIndexGridMap2D::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PProbabilityIndexGridMap2D::data() const {
  // @@protoc_insertion_point(field_list:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PProbabilityIndexGridMap2D::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PProbabilityIndexGridMap2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProbabilityMap
}  // namespace ZimaProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zima_2fproto_2fprobability_5fmap_2eproto
